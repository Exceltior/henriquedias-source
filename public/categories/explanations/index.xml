<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Explanations on Henrique Dias</title>
    <link>https://henriquedias.com/categories/explanations/</link>
    <description>Recent content in Explanations on Henrique Dias</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Jun 2015 15:01:00 +0000</lastBuildDate>
    <atom:link href="https://henriquedias.com/categories/explanations/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PHP - Diferenças entre &#39;&amp;&amp;/||&#39; e &#39;AND/OR&#39;</title>
      <link>https://henriquedias.com/explanations/php-diferencas-operadores-logicos-precedencia</link>
      <pubDate>Wed, 10 Jun 2015 15:01:00 +0000</pubDate>
      
      <guid>https://henriquedias.com/explanations/php-diferencas-operadores-logicos-precedencia</guid>
      <description>&lt;p&gt;Há alguns dias publiquei um artigo onde expliquei as &lt;a href=&#34;https://henriquedias.com/explanations/diferencas-entre-igual-identico-php/&#34;&gt;diferenças entre os operadores &lt;code&gt;==&lt;/code&gt; e &lt;code&gt;===&lt;/code&gt;&lt;/a&gt;. Depois de partilhar esse artigo no Google Plus, a comunidade &lt;a href=&#34;https://plus.google.com/communities/106163623473782778474&#34;&gt;PHP Brasil&lt;/a&gt; sugeriu-me que falasse sobre as diferenças entre os operadores &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;/&lt;code&gt;||&lt;/code&gt; e &lt;code&gt;AND&lt;/code&gt;/&lt;code&gt;OR&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Depois de ter pesquisado sobre estes quatro operadores, descobri que sim, realmente &lt;strong&gt;existem diferenças entre&lt;/strong&gt; esses dois conjuntos de operadores.&lt;/p&gt;

&lt;p&gt;Para exemplificar, vamos utilizar valores &lt;strong&gt;booleanos&lt;/strong&gt;, ou seja, &lt;code&gt;false&lt;/code&gt; e &lt;code&gt;true&lt;/code&gt; (ou 0 e 1, respetivamente), e os operadores &lt;code&gt;AND&lt;/code&gt; e &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Em primeiro lugar, vamos declarar duas variáveis, uma que seja igual a true  e outra igual a false como as seguintes:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$verdadeiro = true;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$falso = false;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Antes de continuarmos, vou recordar algo parecido às regras da multiplicação/divisão com sinais diferentes, mas aqui para verdadeiros e falsos:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;true&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;false&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;true&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;false&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Esta tabela mostra o resultado de comparações feitas entre os vários valores booleanos. Continuando agora com o &amp;ldquo;nosso&amp;rdquo; PHP, vamos definir uma variável chamada, por exemplo, $comparacao e igualá-la a comparações entre as variáveis booleanas anteriormente definidas.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$comparacao = $verdadeiro &amp;amp;&amp;amp; $falso;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assim, concluímos que a variável &lt;code&gt;$comparacao&lt;/code&gt;  é igual a falso. Vamos agora utilizar o operador AND.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$comparacao = $verdadeiro AND $falso;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Olhando para a tabela e para a igualdade, pensamos logo que $comparacao  é igual a falso mas&amp;hellip; está &lt;strong&gt;errado!&lt;/strong&gt; &lt;code&gt;$comparacao&lt;/code&gt;  é agora igual a &lt;strong&gt;verdadeiro&lt;/strong&gt;. Mas como assim?&lt;/p&gt;

&lt;p&gt;Isto acontece devido ao &lt;strong&gt;&lt;a href=&#34;http://php.net/manual/pt_BR/language.operators.precedence.php&#34;&gt;nível de precedência&lt;/a&gt;&lt;/strong&gt; dos operadores, ou seja, quando existe mais do que um operador num comando, existem níveis de prioridade sendo uns executados antes do que outros.&lt;/p&gt;

&lt;p&gt;As duas linhas acima são equivalentes às seguintes, respetivamente:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$comparacao = ( $verdadeiro &amp;amp;&amp;amp; $falso );&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;( $comparacao = $verdadeiro ) AND $falso;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O nível de precedência do operador &lt;code&gt;=&lt;/code&gt;  é mais elevado que o do operador &lt;code&gt;AND&lt;/code&gt;. Porém, o nível de precedência do operador &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; é mais elevado que o de &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Podemos exemplificar isto dos níveis de precedência utilizando matemática. Se escrevermos &lt;code&gt;5 + 2 * 4&lt;/code&gt;, automaticamente sabemos que vamos efetuar primeiro a multiplicação e só depois a adição, resultando em 13 ou seja, a multiplicação tem prioridade em relação à adição. Assim, &lt;code&gt;5 + 2 * 4 = 5 + (2 * 4)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Só colocando parênteses é que podemos efetuar primeiro a adição e depois a multiplicação: (5 + 2) * 4 . Esta última já resulta em 28.&lt;/p&gt;

&lt;p&gt;O mesmo acontece com os operadores &lt;code&gt;OR&lt;/code&gt; e &lt;code&gt;||&lt;/code&gt; sendo que o segundo tem um nível de precedência mais elevado que o primeiro. Acrescento ainda que esta explicação é válida para outras linguagens de programação, como Ruby, por exemplo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modelo MVC - Uma breve explicação</title>
      <link>https://henriquedias.com/explanations/mvc-uma-breve-explicacao</link>
      <pubDate>Sat, 22 Nov 2014 16:02:56 +0000</pubDate>
      
      <guid>https://henriquedias.com/explanations/mvc-uma-breve-explicacao</guid>
      <description>

&lt;p&gt;A programação é algo fantástico que nos permite fazer qualquer coisa das mais diversas formas. Podemos criar, inovar, melhorar e até nos divertirmos. Existem várias formas de programar, várias maneiras.&lt;/p&gt;

&lt;p&gt;Cada um, ao longo do tempo, vai adotando diversas formas de programar, diversas idiossincrasias que o vai distinguir ao longo do tempo. Mas o que vos trazemos hoje não é nenhuma idiossincrasia, é o modelo &lt;strong&gt;MVC&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MVC&lt;/strong&gt; é um modelo de arquitetura de software que é muito utilizado atualmente mas, por vezes, pode tornar-se confuso inicialmente (como me aconteceu) mas, depois de alguma pesquisa, cheguei à conclusão de que é muito simples &lt;strong&gt;compreender&lt;/strong&gt; este modelo.&lt;/p&gt;

&lt;h2 id=&#34;o-que-quer-dizer-mvc:451bfcfedd1834e71bbe73844715757f&#34;&gt;O que quer dizer MVC?&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é importante saber o que quer dizer MVC e o que é e para que serve cada uma das suas componentes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MVC&lt;/strong&gt; quer dizer, em inglês, &lt;em&gt;model-view-controller&lt;/em&gt; e, em português, podemos traduzir para &lt;strong&gt;modelo-vista-controlador&lt;/strong&gt;. Estas são também as três componentes base deste modelo.&lt;/p&gt;

&lt;h2 id=&#34;vista:451bfcfedd1834e71bbe73844715757f&#34;&gt;Vista&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://henriquedias.com/images/olho.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;As vistas são os olhos da aplicação&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;A camada &lt;strong&gt;Vista&lt;/strong&gt; (&lt;em&gt;View&lt;/em&gt;) é aquela que é mostrada ao utilizador, aquela que com a qual o utilizador vai interagir. É a &lt;strong&gt;camada de apresentação&lt;/strong&gt;. A camada dos estilos, do &lt;em&gt;design&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Geralmente, esta camada não conta com lógica de programação podendo, por vezes, ser &amp;ldquo;puro&amp;rdquo; HTML com alguns bocados de outra linguagem para, por exemplo, inserir algum dado necessário.&lt;/p&gt;

&lt;h2 id=&#34;controladores:451bfcfedd1834e71bbe73844715757f&#34;&gt;Controladores&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://henriquedias.com/images/cerebro.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Os controladores, o cérebro&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;A segunda camada a ser mencionada é a dos &lt;strong&gt;Controladores&lt;/strong&gt; (&lt;em&gt;Controllers&lt;/em&gt;) e é nela que &lt;strong&gt;a magia acontece&lt;/strong&gt;. É a camada intermédia do padrão MVC e toda a lógica está aqui contida.&lt;/p&gt;

&lt;p&gt;Quando acedemos a um site cujo modelo de programação tenha sido MVC, automaticamente acedemos ao controlador que vai receber o nosso pedido. Logo de seguida, ele coordena todos os processos seguintes: pedir informação, receber informação, mostrar a página (&lt;strong&gt;Vista&lt;/strong&gt;) ao utilizador, etc,&lt;/p&gt;

&lt;h2 id=&#34;modelos:451bfcfedd1834e71bbe73844715757f&#34;&gt;Modelos&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://henriquedias.com/images/sist-nev.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;E o sistema nervoso&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Esta é a camada mais invisível ao utilizador. É nela que tudo o que tem haver com dados é feito: pedir coisas à base de dados, inserir coisas, eliminar coisas, trocar coisas, etc.&lt;/p&gt;

&lt;p&gt;O controlador (mencionado acima), envia informação para o modelo armazenar/apagar/etc da base de dados. De forma generalizada, o &lt;strong&gt;modelo&lt;/strong&gt; trabalha com os dados.&lt;/p&gt;

&lt;h2 id=&#34;é-útil:451bfcfedd1834e71bbe73844715757f&#34;&gt;É útil?&lt;/h2&gt;

&lt;p&gt;Diga-me você! Existem várias vantagens e desvantagens em trabalhar com o modelo MVC. Por um lado, é bom porque cada coisa está no seu devido sítio sendo mais fácil trabalhar e alterar estruturas.&lt;/p&gt;

&lt;p&gt;Por outro lado, não é recomendado para pequenas aplicações visto que a sua complexidade pode prejudicar um pouco a performance e também o design. &lt;strong&gt;Qual a sua opinião acerca do modelo MVC?&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP e WordPress: comandos &#39;printf&#39; e &#39;sprintf&#39;</title>
      <link>https://henriquedias.com/explanations/php-wordpress-comandos-printf-sprintf</link>
      <pubDate>Sat, 13 Sep 2014 09:16:48 +0000</pubDate>
      
      <guid>https://henriquedias.com/explanations/php-wordpress-comandos-printf-sprintf</guid>
      <description>

&lt;p&gt;No &lt;a href=&#34;https://henriquedias.com/explanations/php-interpolacao-concatenacao/&#34;&gt;último artigo&lt;/a&gt; sugeriram-me falar sobre as funções printf  e  sprintf  que são utilizadas em massa no Wordpress e é isso que vou fazer! Vamos analisar cada uma das funções.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://henriquedias.com/images/printfsprintf.jpg&#34; alt=&#34;PHP - Strings: interpolação e concatenação&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Vou começar por analisar as duas funções em separado, explicando para que servem e dando alguns exemplos.&lt;/p&gt;

&lt;h2 id=&#34;printf:e349da165fbbbc6e6ae9edeba8cd3125&#34;&gt;printf&lt;/h2&gt;

&lt;p&gt;O nome desta função quer dizer &lt;em&gt;print formatted&lt;/em&gt;, ou seja, &amp;ldquo;imprimir dados formatados&amp;rdquo;. Abaixo encontra um exemplo mais simples:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;printf(&amp;quot;Olá mundo!&amp;quot;);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//Olá mundo!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E agora você pergunta-me: que utilidade tem essa função se podemos fazer o mesmo com &lt;code&gt;echo&lt;/code&gt; ou &lt;code&gt;print&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;É aqui que está função se destaca. Compare as seguintes impressões, todas vão imprimir o mesmo.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$foo = &amp;quot;Henrique&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$bar = &amp;quot;14&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$site = &amp;quot;COXPE&amp;quot;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//Chamo-me Henrique, tenho 14 anos e estou a navegar no COXPE.&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;echo &amp;#39;Chamo-me &amp;#39; . $foo . &amp;#39;, tenho &amp;#39; . $bar . &amp;#39; anos e estou a navegar no &amp;#39; . $site . &amp;#39;.&amp;#39;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;echo &amp;quot;Chamo-me {$foo} tenho {$bar} anos e estou a navegar no {$site}.&amp;quot;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;printf(&amp;quot;Chamo-me %s e tenho %d anos e estou a navegar no %s.&amp;quot;,&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;	$foo, $bar, $site);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se repararmos, das três, a última é a que tem uma maior legibilidade, tal como o leitor Carlos Santos tinha mencionado.&lt;/p&gt;

&lt;p&gt;Como pode ver, existe ali um &lt;code&gt;%s&lt;/code&gt; e um&lt;code&gt; %d&lt;/code&gt; que são substituídos pelas variáveis que coloco depois. Existem vários &amp;ldquo;por centos&amp;rdquo;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt; → imprime um sinal &amp;ldquo;%&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%b&lt;/code&gt; → permite o envio de um número inteiro que será imprimido em binário&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%c&lt;/code&gt; → permite o envio de um número inteiro e será imprimido o caractere ASCII correspondente.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%d&lt;/code&gt; → permite o envio de um número inteiro e imprime-o&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%e&lt;/code&gt; → o argumento é tratado como notação científica&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%E&lt;/code&gt; → igual ao anterior porém o &amp;ldquo;e&amp;rdquo; tem que ser maiúsculo (&amp;ldquo;12E5&amp;rdquo; em vez de &amp;ldquo;12e5&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%f&lt;/code&gt; → o argumento é tratado como &lt;em&gt;float&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%g&lt;/code&gt; → atalho para &lt;code&gt;%e&lt;/code&gt; e &lt;code&gt;%f&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%G&lt;/code&gt; → atalho para &lt;code&gt;%E&lt;/code&gt; e &lt;code&gt;%f&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estes são os mais utilizados porém podem ver mais &lt;a href=&#34;http://php.net/manual/en/function.sprintf.php&#34;&gt;aqui&lt;/a&gt;. Assim, para utilizar esta função, seguimos a seguinte sintaxe:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;printf($formato[, $restantesArgumentos...])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O $formato  é a string que contém a frase a ser imprimida com as diversas diretivas que podem ser 0 ou mais. É indiferente.&lt;/p&gt;

&lt;p&gt;Os restantes argumentos são os dados que são para ser enviados para essas diretivas por ordem de aparecimento na string.&lt;/p&gt;

&lt;h2 id=&#34;sprintf:e349da165fbbbc6e6ae9edeba8cd3125&#34;&gt;sprintf&lt;/h2&gt;

&lt;p&gt;A única diferença entre esta função e a &lt;code&gt;printf&lt;/code&gt;  é que esta &lt;strong&gt;retorna&lt;/strong&gt; a string formatada e &lt;code&gt;printf&lt;/code&gt;  &lt;strong&gt;imprime&lt;/strong&gt; a string formatada.&lt;/p&gt;

&lt;h2 id=&#34;wordpress-traduções-e-estas-funções:e349da165fbbbc6e6ae9edeba8cd3125&#34;&gt;WordPress, traduções e estas funções&amp;hellip;&lt;/h2&gt;

&lt;p&gt;O WordPress usa estas funções em massa juntamente com o sistema de tradução tornando esta função extremamente potente.&lt;/p&gt;

&lt;p&gt;Este CMS usa o sistema &lt;a href=&#34;Gettext&#34;&gt;Gettext&lt;/a&gt; para traduzir o conteúdo que nos é visível. Agora não vamos entrar em detalhes sobre a ativação deste sistema (se tiverem qualquer dúvida coloquem).&lt;/p&gt;

&lt;p&gt;O WordPress deve utilizar este sistema também pela simplicidade de leitura visto que os comandos de tradução do Gettext são um quanto &amp;ldquo;complicados&amp;rdquo; de ler.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;//Exemplo de &amp;quot;printf&amp;quot; utilizado pelo WordPress&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;printf( __( &amp;#39;Ready to publish your first post? &amp;lt;a href=&amp;quot;%1$s&amp;quot;&amp;gt;Get started here&amp;lt;/a&amp;gt;.&amp;#39;, &amp;#39;twentyfourteen&amp;#39; ), admin_url( &amp;#39;post-new.php&amp;#39; ) );&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//Em Echo&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$url = admin_url( &amp;#39;post-new.php&amp;#39; );&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;echo __( &amp;quot;Ready to publish your first post? &amp;lt;a href=&amp;quot;{$url}&amp;quot;&amp;gt;Get started here&amp;lt;/a&amp;gt;.&amp;quot;, &amp;#39;twentyfourteen&amp;#39; );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A forma que coloquei com echo poderia variar. Mas, como pode visualizar, o printf é mais simples de ler.&lt;/p&gt;

&lt;p&gt;Vou deixar esta parte para um outro artigo ;) Deixo já nos rascunhos. Em breve poderei fazer um artigo sobre o Gettext, como ativar e usar! =D&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;A partir de segunda-feira, a frequência de lançamento de artigos irá diminuir porque a escola vai recomeçar. Continuarei a lançar a &lt;a href=&#34;http://pplware.sapo.pt/tutoriais/programacao/vamos-programar-introducao-a-programacao-2/&#34;&gt;rubrica semanal&lt;/a&gt; com o Pplware e também no &lt;a href=&#34;http://kids.pplware.sapo.pt/&#34;&gt;Pplware Kids&lt;/a&gt;. Isto não quer dizer que deixarei de escrever para o COXPE. Sempre que puder, virei aqui :) Obrigado pela compreensão.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP - Strings: interpolação e concatenação</title>
      <link>https://henriquedias.com/explanations/php-interpolacao-concatenacao</link>
      <pubDate>Tue, 09 Sep 2014 15:19:43 +0000</pubDate>
      
      <guid>https://henriquedias.com/explanations/php-interpolacao-concatenacao</guid>
      <description>

&lt;p&gt;Hoje vamos falar um pouco sobre PHP, mais precisamente no campo das strings, variáveis e concatenações. Como sabem, existem várias formas de inserir o valor de variáveis dentro de strings, mas qual será a &amp;ldquo;melhor&amp;rdquo; e mais rápida?&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://henriquedias.com/images/phpinterpolacaoconcatenacao.jpg&#34; alt=&#34;PHP - Strings: interpolação e concatenação&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Em primeiro lugar, vamos rever as formas de inserir variáveis dentro de &lt;em&gt;strings&lt;/em&gt; atualmente já existentes:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;uma pessoa&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$bar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Eu sou &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; 1&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$bar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Eu sou &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; 2&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$bar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Eu sou &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$foo&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; 3&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$bar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Eu sou &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos analisar os quatro exemplos acima sendo que os primeiros dois é utilizada &lt;strong&gt;concatenação&lt;/strong&gt; e nos últimos dois &lt;strong&gt;interpolação&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;métodos-1-e-2:2784d983cbda87ee9c00b8472de3a7a0&#34;&gt;Métodos 1 e 2&lt;/h2&gt;

&lt;p&gt;Vamos começar por analisar o primeiro. Neste caso, o segundo método devia ser utilizado ao invés do primeiro. Porquê?&lt;/p&gt;

&lt;p&gt;As aspas duplas dizem ao PHP para iniciar a interpolação gastando mais recursos e podendo demorar mais tempo. Devemos utilizar a aspa única quando não utilizamos nenhum benefício da interpolação como &lt;code&gt;n&lt;/code&gt;, por exemplo.&lt;/p&gt;

&lt;h2 id=&#34;métodos-3-e-4:2784d983cbda87ee9c00b8472de3a7a0&#34;&gt;Métodos 3 e 4&lt;/h2&gt;

&lt;p&gt;Em relação ao terceiro e quarto, é indiferente porém o uso de chavetas é extremamente recomendado quando se inserem variáveis mais complexas como &lt;em&gt;arrays&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Caso sejam variáveis simples, o uso de chavetas é desnecessário não trazendo benefícios nem malefícios.&lt;/p&gt;

&lt;h2 id=&#34;qual-devo-usar:2784d983cbda87ee9c00b8472de3a7a0&#34;&gt;Qual devo usar?&lt;/h2&gt;

&lt;p&gt;Depende! Geralmente, a interpolação é mais lenta porém, a concatenação pode tornar-se mais lenta caso sejam utilizadas muitas variáveis.&lt;/p&gt;

&lt;p&gt;Executei seguinte teste para confirmar as velocidades que cada um demora a correr (função &lt;a href=&#34;http://stackoverflow.com/questions/13620/speed-difference-in-using-inline-strings-vs-concatenation-in-php5&#34;&gt;timeFunc&lt;/a&gt; obtida aqui):&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;timeFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$runs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$times&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$runs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;microtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;call_user_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$times&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;microtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;array_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$times&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$runs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Method1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;uma pessoa&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Eu sou &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Method2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;uma pessoa&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Eu sou &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//2&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Method3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;uma pessoa&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Eu sou &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$foo&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//3&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Method4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;uma pessoa&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Eu sou &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//4&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Method1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; 0.0020885&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Method2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; 0.0021168&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Method3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; 0.0021132&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Method4&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; 0.0023884&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Recebi os valores mencionados nos comentários. Como podem ver, não existem grandes diferenças no tempo de execução destes pequenos exemplos. Espero que o post tenha sido útil.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP 5.6 - Funções Variádicas (Nova Sintaxe)</title>
      <link>https://henriquedias.com/explanations/php-56-funcoes-variadicas-nova-sintaxe</link>
      <pubDate>Sun, 31 Aug 2014 09:37:05 +0000</pubDate>
      
      <guid>https://henriquedias.com/explanations/php-56-funcoes-variadicas-nova-sintaxe</guid>
      <description>

&lt;p&gt;Há pouco mais de dois dias, foi lançada uma nova versão do PHP, &lt;a href=&#34;http://php.net/archive/2014.php#id2014-08-28-1&#34;&gt;a versão 5.6.0&lt;/a&gt; que trouxe inúmeras novidades e incompatibilidades com as versões anteriores &lt;a href=&#34;http://pt2.php.net/manual/en/migration56.php&#34;&gt;(ver aqui)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hoje vamos falar de uma das diversas grandes novidades desta esplêndida atualização, as &lt;strong&gt;funções variádicas&lt;/strong&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://henriquedias.com/images/funcoesvariadicas560.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Ao longo das versões 4.x e 5.x do PHP, os desenvolvedores já podiam utilizar funções variádicas através do uso da função &lt;code&gt;func_get_args()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Se, por exemplo, quiséssemos criar uma função que fizesse a soma de todos os valores passados nos argumentos, bastaria fazermos assim:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;function soma() {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  return array_sum(func_get_args());&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;echo soma(1, 4, 12, 20); // =&amp;gt; 37&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apesar desta forma ainda estar disponível na versão 5.6.0, a sua sintaxe pode ser aprimorada para a seguinte:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;function soma(...$nums) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  return array_sum($nums);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;echo soma(1, 4, 12, 20); //= 37&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ou seja, na nova versão do PHP, basta utilizarmos o operador &amp;hellip;  para criarmos um &lt;em&gt;array&lt;/em&gt; que contenha todos os restantes parâmetros enviados.&lt;/p&gt;

&lt;h2 id=&#34;perda-de-tempo-menor:49a54b9d504b4767ba55a4663de4b4cd&#34;&gt;Perda de tempo menor&lt;/h2&gt;

&lt;p&gt;Uma vantagem na utilização deste método é a &lt;strong&gt;menor perda de tempo&lt;/strong&gt;. Como assim? Vou utilizar um exemplo dado pelos colegas do &lt;a href=&#34;http://imasters.com.br&#34;&gt;imasters.com.br&lt;/a&gt;. Em vez de escrevermos assim:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;public function tryMethod() {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;        $args = func_get_args();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $method = $args[0];&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        unset($args[0]);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $args = array_values($args);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    try {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;        return call_user_func_array([$this, $method], $args);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    } catch (Exception $e) {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;        return false;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos, simplesmente, escrever da seguinte forma:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;public function tryMethod($method, ...$args) {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    try {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;        return call_user_func_array([$this, $method], $args);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    } catch (Exception $e) {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;        return false;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;legibilidade:49a54b9d504b4767ba55a4663de4b4cd&#34;&gt;Legibilidade&lt;/h2&gt;

&lt;p&gt;Simples, não é? Outra grande vantagem é a &lt;strong&gt;legibilidade&lt;/strong&gt; visto que o código fica mais legível utilizando esta sintaxe. O exemplo acima é, também, um bom exemplo para este ponto.&lt;/p&gt;

&lt;h2 id=&#34;conclusão:49a54b9d504b4767ba55a4663de4b4cd&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Falando mais no geral e vendo a lista de &lt;a href=&#34;http://pt2.php.net/manual/pt_BR/migration56.new-features.php&#34;&gt;novas funcionalidades/alterações&lt;/a&gt; da nova versão do PHP, podemos verificar que a versão traz muitas melhorias.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;O que acham vocês, leitores e desenvolvedores, desta nova versão do PHP?&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>5 truques e dicas em PHP</title>
      <link>https://henriquedias.com/explanations/truques-dicas-em-php</link>
      <pubDate>Fri, 29 Aug 2014 16:47:20 +0000</pubDate>
      
      <guid>https://henriquedias.com/explanations/truques-dicas-em-php</guid>
      <description>

&lt;p&gt;A linguagem de programação PHP é das mais utilizadas atualmente do lado do servidor quando o assunto são páginas web.&lt;/p&gt;

&lt;p&gt;Para os iniciantes ou mesmo profissionais, aqui estão 5 simples e úteis truques e dicas para aplicarem quando estão a escrever em PHP.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://henriquedias.com/images/php5dicas.jpg&#34; alt=&#34;5 truques e dicas em PHP&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;1-utilizar-o-operador-ternário:142d40d378f82790ef24274f222d6b1c&#34;&gt;1. Utilizar o operador ternário&lt;/h2&gt;

&lt;p&gt;Nós já escrevemos um artigo sobre este operador que podem ver &lt;a href=&#34;https://henriquedias.com/explanations/operador-ternario/&#34;&gt;aqui&lt;/a&gt;. Para laços (&lt;em&gt;loops&lt;/em&gt;) simples, podemos utilizar o operador ternário de forma a poupar espaço como podem ver no exemplo seguinte:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$n = rand(0,100);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;if ($n &amp;gt; 50) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    echo &amp;#39;O número é maior que 50!&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;} else {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    echo &amp;#39;O número é menor que 50!&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//Utilizando o operador ternário ficaria:&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;echo ($n &amp;gt; 50) ? &amp;#39;O número é maior que 50!&amp;#39; : &amp;#39;O número é menor que 50!&amp;#39;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//O leitor Gustavo Rafael sugeriu uma forma mais simplificada:&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;echo &amp;#39;O número é &amp;#39; . (($n &amp;gt; 50) ? &amp;#39;maior&amp;#39; : &amp;#39;menor&amp;#39;) . &amp;#39; que 50!&amp;#39;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;2-nunca-mais-te-voltas-a-enganar-nos-ifs:142d40d378f82790ef24274f222d6b1c&#34;&gt;2. Nunca mais te voltas a enganar nos &lt;code&gt;ifs&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Um erro muito cometido é atribuir um valor a uma variável dentro de uma condição ou seja, colocamos &lt;code&gt;$x = 1&lt;/code&gt; ao invés de &lt;code&gt;$x == 1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O mais &amp;ldquo;engraçado&amp;rdquo; é que o PHP não dá erro e, por vezes, gastamos muito tempo à procura da fonte do problema.&lt;/p&gt;

&lt;p&gt;Esta situação pode ser invertida colocando a variável na segunda posição. Assim, o PHP irá gerar um erro quando nos enganamos:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;//Não produz erro&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;if ( $userRole = 0 ) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;   echo &amp;#39;Você é Administrador.&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//Produz erro&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;if ( 0 = $userRole ) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;   echo &amp;#39;Você é Administrador.&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O que acontece aqui, é que o PHP não nos vai deixar atribuir um valor a um valor (um pouco redundante), gerando erro.&lt;/p&gt;

&lt;h2 id=&#34;3-saber-se-o-número-é-par-ou-ímpar:142d40d378f82790ef24274f222d6b1c&#34;&gt;3. Saber se o número é par ou ímpar&lt;/h2&gt;

&lt;p&gt;À primeira vista pode parecer algo muito pouco importante porém pode ser muito útil nas mais diversas situações.&lt;/p&gt;

&lt;p&gt;Existe uma forma extremamente simples de saber se um número é par ou ímpar. Veja:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$n = 1250;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;// ex1&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;echo ($n &amp;amp; 1) ? &amp;quot;Ímpar&amp;quot; : &amp;quot;Par&amp;quot;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;// ex2&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;if ($n &amp;amp; 1) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  // o que fazer se o número for ímpar&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;} else {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  // o que fazer se o número for par&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;4-não-deve-utilizar-funções-dentro-de-laços:142d40d378f82790ef24274f222d6b1c&#34;&gt;4. Não deve utilizar funções dentro de laços&lt;/h2&gt;

&lt;p&gt;Quando utilizamos funções dentro de um laço, esta função é chamada sempre que o laço é executado tornando o tempo de execução mais lento. Exemplo:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;for ($i = 0; $i &amp;lt; count($array); $i) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  //Sempre que este laço é executado, a função count() será chamada.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;5-comparar-2-conjuntos-de-caracteres-strings:142d40d378f82790ef24274f222d6b1c&#34;&gt;5. Comparar 2 conjuntos de caracteres (&lt;code&gt;strings&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;Última mas não menos importante. Mais uma que pode parecer desnecessária, mas pode ser muito útil. Exemplo:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$frase1 = &amp;#39;Não se esqueçam de gostar a nossa página do Facebook&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$frase2 = &amp;#39;Não se esqueçam de seguir a nossa página do Google+&amp;#39;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;// criação da comparação&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;similar_text($frase1, $frase2, $howMuchEqual);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;// a variável $hoeMuchEqual vai conter a percentagem de igualdade entre as duas frases.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;// neste caso, $howMuchEqual será igual a 82.56880733945&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;

&lt;p&gt;Como podem ver, as dicas mais simples podem vir a ser muito úteis.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP - Devemos usar a tag de fechamento ou não?</title>
      <link>https://henriquedias.com/explanations/php-devemos-usar-tag-fechamento-ou-nao</link>
      <pubDate>Wed, 27 Aug 2014 09:15:18 +0000</pubDate>
      
      <guid>https://henriquedias.com/explanations/php-devemos-usar-tag-fechamento-ou-nao</guid>
      <description>

&lt;p&gt;Recentemente comecei a reparar que muitos programadores omitiam a tag de fechamento dos ficheiros PHP e, obviamente, fiquei curioso.&lt;/p&gt;

&lt;p&gt;Depois de uma pesquisa, trago-vos o &lt;strong&gt;porquê&lt;/strong&gt; de não utilizar a tag &lt;code&gt;?&amp;gt;&lt;/code&gt; no final dos ficheiros.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://henriquedias.com/images/phptagfechamento.png&#34; alt=&#34;PHP - Devemos usar a tag de fechamento ou não?&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Em primeiro lugar, esta prática só deve ser realizada em ficheiros cujo seu conteúdo seja &lt;strong&gt;somente PHP&lt;/strong&gt; e não contenha HTML, por exemplo.&lt;/p&gt;

&lt;h2 id=&#34;o-que-acontece-se:28ef2dafecfeffa0dabf42801406fb11&#34;&gt;O que acontece se&amp;hellip;?&lt;/h2&gt;

&lt;p&gt;Vamos começar por debater a pergunta que vocês vêm aí em cima: &lt;strong&gt;o que acontece&lt;/strong&gt; se omitirmos a &lt;em&gt;tag&lt;/em&gt; de fechamento.&lt;/p&gt;

&lt;p&gt;A resposta é muito simples: se omitirmos a &lt;em&gt;tag&lt;/em&gt; de fechamento de PHP, este irá tratar todos os espaços vazios e quebras de linha como caracteres &amp;ldquo;inúteis&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Agora, invertendo a pergunta, &lt;strong&gt;o que acontece se utilizarmos a tag de fechamento&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Se o fizermos, tudo o que se encontra depois dessa tag irá ser enviado para o browser e, além disso poderá haver problemas com os cabeçalhos HTTP.&lt;/p&gt;

&lt;h2 id=&#34;como-assim:28ef2dafecfeffa0dabf42801406fb11&#34;&gt;Como assim?&lt;/h2&gt;

&lt;p&gt;Existem diversas funções que utilizamos frequentemente no código como &lt;code&gt;session_start()&lt;/code&gt;, &lt;code&gt;header()&lt;/code&gt;, dentro de muitas outras que alteram estes cabeçalhos.&lt;/p&gt;

&lt;p&gt;Ou seja, se alguém cometer qualquer descuido e colocar, simplesmente, diversas linhas em branco no ficheiro, poderá ocorrer um erro ao utilizar funções que utilizem os cabeçalhos.&lt;/p&gt;

&lt;h2 id=&#34;assim:28ef2dafecfeffa0dabf42801406fb11&#34;&gt;Assim&amp;hellip;&lt;/h2&gt;

&lt;p&gt;Depois de eu próprio ter lido tudo isto descobri a solução a um grande problema que estava a ter:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cannot modify header information – headers already sent&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Este erro leva-nos, por vezes, a grandes &amp;ldquo;buscas&amp;rdquo; sendo o problema simplesmente simples. E que tal, já sabiam desta pequena &amp;ldquo;dica&amp;rdquo;?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Edição:&lt;/strong&gt; Criei um &lt;a href=&#34;https://gist.github.com/hacdias/aacf68dd880e9fb15447&#34;&gt;Gist&lt;/a&gt; no GitHub com alguns exemplos. Sintam-se livres para colaborar :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP - (Algumas) tags dos DOCBlocks</title>
      <link>https://henriquedias.com/explanations/php-tags-docblocks</link>
      <pubDate>Mon, 11 Aug 2014 20:26:21 +0000</pubDate>
      
      <guid>https://henriquedias.com/explanations/php-tags-docblocks</guid>
      <description>&lt;p&gt;Para quem desenvolve aplicações em PHP com outras pessoas ou mesmo sozinho, por vezes precisa de colocar &lt;strong&gt;comentários&lt;/strong&gt; em vários locais para identificar os diversos processos que vão ocorrendo.&lt;/p&gt;

&lt;p&gt;Os &lt;strong&gt;DocBlocks&lt;/strong&gt; são (quase) fundamentais na vida dos programadores e estão disponíveis em várias linguagens. Vamos analisar as &lt;strong&gt;tags&lt;/strong&gt; que existem nos de PHP e como os utilizar.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://henriquedias.com/images/docblockstag.jpg&#34; alt=&#34;PHP - (Algumas) tags dos DOCBlocks&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Os DocBlocks em PHP são parte do PHPDoc, uma adaptação do sistema &lt;strong&gt;javadoc&lt;/strong&gt; para a linguagem de programação PHP.&lt;/p&gt;

&lt;p&gt;Os DocBlocks, ao contrário dos comentários tradicionais, começam sempre por &lt;code&gt;/**&lt;/code&gt; ao invés de &lt;code&gt;/*&lt;/code&gt; ou &lt;code&gt;//&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Estes blocos documentam o código a que precedem. Abaixo podem ver um simples exemplo:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Função lorem faz x,y,z&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @param    string $sth    Descrição do param&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @return    string        Descrição do retorno&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;function lorem($sth = &amp;#39;&amp;#39;) {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    if (!is_string($sth)) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        return &amp;#39;Fail&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    return $sth;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Normalmente, a estrutura destes blocos de documentação é:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Descrição curta&lt;/li&gt;
&lt;li&gt;Descrição longa&lt;/li&gt;
&lt;li&gt;Tags
Hoje vamos analisar o último ponto: as &lt;strong&gt;tags&lt;/strong&gt;. Existem imensas e vamos apenas ver as principais e mais utilizadas.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @author        Nome Do Autor &amp;lt;email@do.autor&amp;gt;    -&amp;gt; Autor do ficheiro&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @copyright     Nome Data                         -&amp;gt; Info da Copyright&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @param         tipo [$nome-da-var] descrição     -&amp;gt; Info acerca de um parâmetro&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @return        tipo descrição                    -&amp;gt; Info acerca do retorno de uma função, p.e.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @since         Versão                            -&amp;gt; Disponível desde a versão xxxx&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @todo          Descrição do afazer               -&amp;gt; Tarefas para fazer&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @package       Nome do pacote                    -&amp;gt; Nome do pacote onde o ficheiro está inserido&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @subpackage    Nome do sub-pacote                -&amp;gt; Nome do sub-pacote&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @deprecated    Versão                            -&amp;gt; Definição de um método obsoleto a partir da versão xxxx&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @version       Versão                            -&amp;gt; Utilizado para definir a versão de um ficheiro/método&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O código acima pode ser visivelmente dividido em três colunas. A primeira são as &lt;strong&gt;tags&lt;/strong&gt;, a segunda a forma de &lt;strong&gt;implementação&lt;/strong&gt; e a terceira, que começa com setas, são indicações a descrever para que servem as tags.&lt;/p&gt;

&lt;p&gt;Estas informações são apenas para vos informar e não devem ser utilizadas em quaisquer contexto dentro de um ficheiro PHP.&lt;/p&gt;

&lt;p&gt;Existem mais tags que podem ser inseridas nos comentários DOCBlocks porém as que se encontram acima são as mais importantes e essenciais. Se quiseres ler mais sobre isto, podes aceder a &lt;a href=&#34;http://manual.phpdoc.org/HTMLSmartyConverter/PHP/phpDocumentor/tutorial_tags.pkg.html&#34;&gt;esta página.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Espero que este artigo  vos tenha sido útil.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Diferenças entre &#39;==&#39; e &#39;===&#39; em PHP</title>
      <link>https://henriquedias.com/explanations/diferencas-entre-igual-identico-php</link>
      <pubDate>Wed, 23 Jul 2014 18:31:23 +0000</pubDate>
      
      <guid>https://henriquedias.com/explanations/diferencas-entre-igual-identico-php</guid>
      <description>

&lt;p&gt;É habitual utilizarem-se diversos operadores quando o assunto é programação. Existem vários até: aritméticos, comparativos e outros.&lt;/p&gt;

&lt;p&gt;Dentro de cada categoria existem vários sendo que a dos &lt;strong&gt;comparativos&lt;/strong&gt; não é excepção e hoje trago-vos dois operadores comparativos, muito parecidos&amp;hellip; ou talvez não: &lt;code&gt;==&lt;/code&gt; e &lt;code&gt;===&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Há já algum tempo que me questionava em relação ao uso de ambos os operadores pois não tinha a certeza de qual devia utilizar nas diversas situações que me apareciam.&lt;/p&gt;

&lt;p&gt;Depois de uma pequena pesquisa, encontrei esta tabela na resposta a uma pergunta no &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stackoverflow&lt;/a&gt; e tomei a liberdade de a transcrever para aqui:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&amp;mdash;&amp;ndash;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;false&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;null&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;array()&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&amp;ldquo;0&amp;rdquo;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;0x0&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&amp;ldquo;0x0&amp;rdquo;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&amp;ldquo;000&amp;rdquo;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&amp;ldquo;0000&amp;rdquo;&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;false&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;null&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;array()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&amp;ldquo;0&amp;rdquo;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;0x0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&amp;ldquo;0x0&amp;rdquo;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&amp;ldquo;000&amp;rdquo;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&amp;ldquo;0000&amp;rdquo;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Como assim? Essa tabela compara diversas possibilidades. &lt;code&gt;!=&lt;/code&gt; quer dizer que é diferente, e os outros dois? Aqui está a diferença entre &lt;code&gt;==&lt;/code&gt; e &lt;code&gt;===&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;==&lt;/code&gt; compara os valores das variáveis ou seja, a &lt;strong&gt;igualdade&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;===&lt;/code&gt; compara os valores das variáveis &lt;strong&gt;e&lt;/strong&gt; o tipo das mesmas ou seja, a &lt;strong&gt;identidade&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estes dois operadores têm dois opostos: o operador &lt;code&gt;!=&lt;/code&gt; e o operador &lt;code&gt;!==&lt;/code&gt; que comparam as mesmas coisas ou seja, o primeiro confirma se as variáveis &lt;strong&gt;não têm valores iguais&lt;/strong&gt; e o segundo verifica se &lt;strong&gt;não têm os valores, nem o tipo iguais&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;exemplo:b3314678417675fcb5ed0f3090572d89&#34;&gt;Exemplo&lt;/h2&gt;

&lt;p&gt;Assim podemos dizer, por exemplo,  que a comparação &lt;code&gt;&amp;quot;1&amp;quot; == 1&lt;/code&gt;  retorna &lt;code&gt;true&lt;/code&gt; mas que &lt;code&gt;&amp;quot;1&amp;quot; === 1&lt;/code&gt;  retorna &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Na primeira comparação só são comparados os valores das variáveis logo 1 é, realmente, igual a 1 daí retornar verdadeiro.&lt;/p&gt;

&lt;p&gt;Na segunda, os tipos também são comparados, enquanto que a primeira é uma string , a segunda é do tipo int  logo é falso apesar do conteúdo ser igual.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Esta explicação é equivalente para outras linguagens de programação como &lt;strong&gt;JavaScript&lt;/strong&gt;, por exemplo.&lt;/p&gt;

&lt;p&gt;Agora que já sei a diferença entre estes dois operadores, é hora de ir mudar alguns &amp;ldquo;==&amp;rdquo; e &amp;ldquo;===&amp;rdquo;.  Podes ler mais sobre operadores comparativos em PHP &lt;a href=&#34;http://au.php.net/manual/en/language.operators.comparison.php&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Operador Ternário ( ? ) em PHP</title>
      <link>https://henriquedias.com/explanations/operador-ternario</link>
      <pubDate>Tue, 22 Jul 2014 09:08:08 +0000</pubDate>
      
      <guid>https://henriquedias.com/explanations/operador-ternario</guid>
      <description>&lt;p&gt;Recentemente, escrevi um artigo onde explicava como fazer uma &lt;a href=&#34;https://henriquedias.com/tutorials/listagem-web-de-uma-tabela-mysql/&#34;&gt;listagem web de uma tabela MySQL&lt;/a&gt; onde utilizei um operador que não tinha a certeza absoluta do que fazia e deixei a explicação um pouco vaga.&lt;/p&gt;

&lt;p&gt;O operador em questão era o ponto de interrogação. Depois de uma pequena pesquisa, descobri que o seu nome é &lt;strong&gt;operador ternário&lt;/strong&gt; e é um operador condicional.&lt;/p&gt;

&lt;p&gt;Já utilizava este operador há algum tempo mas estava reticente em relação à sua sintaxe pois não tinha a certeza se o que estava a fazer estava 100% correto por isso decidi pesquisar.&lt;/p&gt;

&lt;p&gt;Este operador é excelente para pequenas e simples condições de &lt;code&gt;if else&lt;/code&gt; onde não pretendemos utilizar muitas linhas.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$url = isset($_GET[&amp;#39;url&amp;#39;]) ? $_GET[&amp;#39;url&amp;#39;] : null;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse excerto acima foi tirado do artigo que mencionei acima e faz o mesmo que o código abaixo:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;if (isset($_GET[&amp;#39;url&amp;#39;]) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;      $url = $_GET[&amp;#39;url&amp;#39;];&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;} else {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;      $url = null;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vendo isto, concluímos que o  operador ternário é mais simples de utilizar, porém um pouco mais difícil de ler.&lt;/p&gt;

&lt;p&gt;A palavra &amp;ldquo;ternário&amp;rdquo; provém de &amp;ldquo;três&amp;rdquo; e é utilizada neste operador porque este precisa de três argumentos. A sintaxe é a seguinte:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(CONDIÇÃO)  ? &amp;lt;O QUE FAZ SE FOR VERDADEIRO&amp;gt; : &amp;lt;O QUE FAZ SE FOR FALSO&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Abaixo encontra-se mais um pequeno exemplo:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$n = rand(0,100);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;if ($n &amp;gt; 50) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    echo &amp;#39;O número é maior que 50!&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;} else {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    echo &amp;#39;O número é menor que 50!&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//Utilizando o operador ternário ficaria:&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;echo ($n &amp;gt; 50) ? &amp;#39;O número é maior que 50!&amp;#39; : &amp;#39;O número é menor que 50!&amp;#39;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//O leitor Gustavo Rafael sugeriu uma forma mais simplificada:&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;echo &amp;#39;O número é &amp;#39; . (($n &amp;gt; 50) ? &amp;#39;maior&amp;#39; : &amp;#39;menor&amp;#39;) . &amp;#39; que 50!&amp;#39;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mais uma vez podemos concluir que utilizando  o operador ternário gastamos menos linhas e poupamos *bytes* no tamanho do ficheiro.&lt;/p&gt;

&lt;p&gt;Para saberem mais sobre operadores em PHP podem aceder a &lt;a href=&#34;http://br2.php.net/manual/en/language.operators.comparison.php&#34;&gt;esta página&lt;/a&gt; no guia oficial da linguagem. Este operador existe também em outras linguagens como C ou JS por exemplo.&lt;/p&gt;

&lt;p&gt;Espero que tenham gostado desta pequena explicação. :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>