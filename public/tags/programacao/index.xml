<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programacao on Henrique Dias</title>
    <link>https://henriquedias.com/tags/programacao/</link>
    <description>Recent content in Programacao on Henrique Dias</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Feb 2015 13:19:43 +0000</lastBuildDate>
    <atom:link href="https://henriquedias.com/tags/programacao/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Aprenda a Programar: o e-book gratuito e essencial</title>
      <link>https://henriquedias.com/general/aprenda-a-programar-o-e-book-gratuito-e-essencial</link>
      <pubDate>Sat, 28 Feb 2015 13:19:43 +0000</pubDate>
      
      <guid>https://henriquedias.com/general/aprenda-a-programar-o-e-book-gratuito-e-essencial</guid>
      <description>&lt;p&gt;&lt;strong&gt;…baseado na saga “Introdução à Programação”.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O mundo está em constante evolução: desde a mais pequena bactéria à espécie Humana. Tudo é extraordinário. A simplicidade só nos veio mostrar o quão complexo é o mundo. Evolução, mudança, futuro – são das palavras que mais ouvimos atualmente, bem como tecnologia.&lt;/p&gt;

&lt;p&gt;Se quer &lt;strong&gt;aprender&lt;/strong&gt; a &lt;strong&gt;programar&lt;/strong&gt; e ainda não começou, hoje trazemos um &lt;em&gt;e-book&lt;/em&gt; gratuito que contém a compilação de todos os artigos da saga Introdução à Programação que foi publicada durante os últimos 6 meses.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pplware.sapo.pt/tutoriais/aprenda-a-programar-o-e-book-gratuito-e-essencial/&#34;&gt;Continue a ler →&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modelo MVC - Uma breve explicação</title>
      <link>https://henriquedias.com/explanations/mvc-uma-breve-explicacao</link>
      <pubDate>Sat, 22 Nov 2014 16:02:56 +0000</pubDate>
      
      <guid>https://henriquedias.com/explanations/mvc-uma-breve-explicacao</guid>
      <description>

&lt;p&gt;A programação é algo fantástico que nos permite fazer qualquer coisa das mais diversas formas. Podemos criar, inovar, melhorar e até nos divertirmos. Existem várias formas de programar, várias maneiras.&lt;/p&gt;

&lt;p&gt;Cada um, ao longo do tempo, vai adotando diversas formas de programar, diversas idiossincrasias que o vai distinguir ao longo do tempo. Mas o que vos trazemos hoje não é nenhuma idiossincrasia, é o modelo &lt;strong&gt;MVC&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MVC&lt;/strong&gt; é um modelo de arquitetura de software que é muito utilizado atualmente mas, por vezes, pode tornar-se confuso inicialmente (como me aconteceu) mas, depois de alguma pesquisa, cheguei à conclusão de que é muito simples &lt;strong&gt;compreender&lt;/strong&gt; este modelo.&lt;/p&gt;

&lt;h2 id=&#34;o-que-quer-dizer-mvc:451bfcfedd1834e71bbe73844715757f&#34;&gt;O que quer dizer MVC?&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é importante saber o que quer dizer MVC e o que é e para que serve cada uma das suas componentes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MVC&lt;/strong&gt; quer dizer, em inglês, &lt;em&gt;model-view-controller&lt;/em&gt; e, em português, podemos traduzir para &lt;strong&gt;modelo-vista-controlador&lt;/strong&gt;. Estas são também as três componentes base deste modelo.&lt;/p&gt;

&lt;h2 id=&#34;vista:451bfcfedd1834e71bbe73844715757f&#34;&gt;Vista&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://henriquedias.com/images/olho.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;As vistas são os olhos da aplicação&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;A camada &lt;strong&gt;Vista&lt;/strong&gt; (&lt;em&gt;View&lt;/em&gt;) é aquela que é mostrada ao utilizador, aquela que com a qual o utilizador vai interagir. É a &lt;strong&gt;camada de apresentação&lt;/strong&gt;. A camada dos estilos, do &lt;em&gt;design&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Geralmente, esta camada não conta com lógica de programação podendo, por vezes, ser &amp;ldquo;puro&amp;rdquo; HTML com alguns bocados de outra linguagem para, por exemplo, inserir algum dado necessário.&lt;/p&gt;

&lt;h2 id=&#34;controladores:451bfcfedd1834e71bbe73844715757f&#34;&gt;Controladores&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://henriquedias.com/images/cerebro.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Os controladores, o cérebro&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;A segunda camada a ser mencionada é a dos &lt;strong&gt;Controladores&lt;/strong&gt; (&lt;em&gt;Controllers&lt;/em&gt;) e é nela que &lt;strong&gt;a magia acontece&lt;/strong&gt;. É a camada intermédia do padrão MVC e toda a lógica está aqui contida.&lt;/p&gt;

&lt;p&gt;Quando acedemos a um site cujo modelo de programação tenha sido MVC, automaticamente acedemos ao controlador que vai receber o nosso pedido. Logo de seguida, ele coordena todos os processos seguintes: pedir informação, receber informação, mostrar a página (&lt;strong&gt;Vista&lt;/strong&gt;) ao utilizador, etc,&lt;/p&gt;

&lt;h2 id=&#34;modelos:451bfcfedd1834e71bbe73844715757f&#34;&gt;Modelos&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://henriquedias.com/images/sist-nev.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;E o sistema nervoso&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Esta é a camada mais invisível ao utilizador. É nela que tudo o que tem haver com dados é feito: pedir coisas à base de dados, inserir coisas, eliminar coisas, trocar coisas, etc.&lt;/p&gt;

&lt;p&gt;O controlador (mencionado acima), envia informação para o modelo armazenar/apagar/etc da base de dados. De forma generalizada, o &lt;strong&gt;modelo&lt;/strong&gt; trabalha com os dados.&lt;/p&gt;

&lt;h2 id=&#34;é-útil:451bfcfedd1834e71bbe73844715757f&#34;&gt;É útil?&lt;/h2&gt;

&lt;p&gt;Diga-me você! Existem várias vantagens e desvantagens em trabalhar com o modelo MVC. Por um lado, é bom porque cada coisa está no seu devido sítio sendo mais fácil trabalhar e alterar estruturas.&lt;/p&gt;

&lt;p&gt;Por outro lado, não é recomendado para pequenas aplicações visto que a sua complexidade pode prejudicar um pouco a performance e também o design. &lt;strong&gt;Qual a sua opinião acerca do modelo MVC?&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP 5.6 - Funções Variádicas (Nova Sintaxe)</title>
      <link>https://henriquedias.com/explanations/php-56-funcoes-variadicas-nova-sintaxe</link>
      <pubDate>Sun, 31 Aug 2014 09:37:05 +0000</pubDate>
      
      <guid>https://henriquedias.com/explanations/php-56-funcoes-variadicas-nova-sintaxe</guid>
      <description>

&lt;p&gt;Há pouco mais de dois dias, foi lançada uma nova versão do PHP, &lt;a href=&#34;http://php.net/archive/2014.php#id2014-08-28-1&#34;&gt;a versão 5.6.0&lt;/a&gt; que trouxe inúmeras novidades e incompatibilidades com as versões anteriores &lt;a href=&#34;http://pt2.php.net/manual/en/migration56.php&#34;&gt;(ver aqui)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hoje vamos falar de uma das diversas grandes novidades desta esplêndida atualização, as &lt;strong&gt;funções variádicas&lt;/strong&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://henriquedias.com/images/funcoesvariadicas560.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Ao longo das versões 4.x e 5.x do PHP, os desenvolvedores já podiam utilizar funções variádicas através do uso da função &lt;code&gt;func_get_args()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Se, por exemplo, quiséssemos criar uma função que fizesse a soma de todos os valores passados nos argumentos, bastaria fazermos assim:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;function soma() {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  return array_sum(func_get_args());&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;echo soma(1, 4, 12, 20); // =&amp;gt; 37&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apesar desta forma ainda estar disponível na versão 5.6.0, a sua sintaxe pode ser aprimorada para a seguinte:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;function soma(...$nums) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  return array_sum($nums);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;echo soma(1, 4, 12, 20); //= 37&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ou seja, na nova versão do PHP, basta utilizarmos o operador &amp;hellip;  para criarmos um &lt;em&gt;array&lt;/em&gt; que contenha todos os restantes parâmetros enviados.&lt;/p&gt;

&lt;h2 id=&#34;perda-de-tempo-menor:49a54b9d504b4767ba55a4663de4b4cd&#34;&gt;Perda de tempo menor&lt;/h2&gt;

&lt;p&gt;Uma vantagem na utilização deste método é a &lt;strong&gt;menor perda de tempo&lt;/strong&gt;. Como assim? Vou utilizar um exemplo dado pelos colegas do &lt;a href=&#34;http://imasters.com.br&#34;&gt;imasters.com.br&lt;/a&gt;. Em vez de escrevermos assim:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;public function tryMethod() {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;        $args = func_get_args();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $method = $args[0];&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        unset($args[0]);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $args = array_values($args);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    try {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;        return call_user_func_array([$this, $method], $args);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    } catch (Exception $e) {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;        return false;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos, simplesmente, escrever da seguinte forma:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;public function tryMethod($method, ...$args) {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    try {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;        return call_user_func_array([$this, $method], $args);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    } catch (Exception $e) {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;        return false;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;legibilidade:49a54b9d504b4767ba55a4663de4b4cd&#34;&gt;Legibilidade&lt;/h2&gt;

&lt;p&gt;Simples, não é? Outra grande vantagem é a &lt;strong&gt;legibilidade&lt;/strong&gt; visto que o código fica mais legível utilizando esta sintaxe. O exemplo acima é, também, um bom exemplo para este ponto.&lt;/p&gt;

&lt;h2 id=&#34;conclusão:49a54b9d504b4767ba55a4663de4b4cd&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Falando mais no geral e vendo a lista de &lt;a href=&#34;http://pt2.php.net/manual/pt_BR/migration56.new-features.php&#34;&gt;novas funcionalidades/alterações&lt;/a&gt; da nova versão do PHP, podemos verificar que a versão traz muitas melhorias.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;O que acham vocês, leitores e desenvolvedores, desta nova versão do PHP?&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Papers We Love - Um dos melhores repositórios do GitHub</title>
      <link>https://henriquedias.com/general/papers-we-love-um-dos-melhores-repositorios-github</link>
      <pubDate>Fri, 22 Aug 2014 09:38:31 +0000</pubDate>
      
      <guid>https://henriquedias.com/general/papers-we-love-um-dos-melhores-repositorios-github</guid>
      <description>&lt;p&gt;Todos nós, vocês, eu, começaram por aprender em algum sítio, não interessa qual, mas aprenderam. O caminho do conhecimento é infinito e a informação nunca se esgota.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://henriquedias.com/images/paperswelove.png&#34; alt=&#34;&amp;quot;Papers We Love&amp;quot; - Um dos melhores repositórios do GitHub&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Recentemente encontrei um excelente repositório no &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt; chamado &lt;a href=&#34;https://github.com/papers-we-love/papers-we-love&#34;&gt;&amp;ldquo;Papers We Love&amp;rdquo;&lt;/a&gt; que contém muita informação sobre &lt;em&gt;computer science&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Computer Science&lt;/em&gt; traduz-se para &amp;ldquo;Ciência dos Computadores&amp;rdquo; ou &amp;ldquo;Ciência da Computação&amp;rdquo; e é uma área diretamente ligada com o mundo da informática.&lt;/p&gt;

&lt;p&gt;Neste repositório encontram das mais diversas informações relacionadas com este universo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;Inteligência Artificial&lt;/li&gt;
&lt;li&gt;Segurança&lt;/li&gt;
&lt;li&gt;Criptografia&lt;/li&gt;
&lt;li&gt;Sistemas Operativos&lt;/li&gt;
&lt;li&gt;Paradigmas&lt;/li&gt;
&lt;li&gt;Máquinas Virtuais&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Et cetera&lt;/em&gt;, etc, etc&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Este repositório nas contém apenas os &amp;ldquo;papéis&amp;rdquo; em si como também tem links para outros repositórios na Internet e documentos.&lt;/p&gt;

&lt;p&gt;Como achei o repositório extremamente útil e interessante decidi compartilhá-lo convosco pois tenho a certeza de que vos será útil.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aqui está o link para o &lt;a href=&#34;http://papers-we-love.github.io/&#34;&gt;site&lt;/a&gt; e para o &lt;a href=&#34;https://github.com/papers-we-love/papers-we-love&#34;&gt;repositório&lt;/a&gt; :)&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Diferenças entre &#39;==&#39; e &#39;===&#39; em PHP</title>
      <link>https://henriquedias.com/explanations/diferencas-entre-igual-identico-php</link>
      <pubDate>Wed, 23 Jul 2014 18:31:23 +0000</pubDate>
      
      <guid>https://henriquedias.com/explanations/diferencas-entre-igual-identico-php</guid>
      <description>

&lt;p&gt;É habitual utilizarem-se diversos operadores quando o assunto é programação. Existem vários até: aritméticos, comparativos e outros.&lt;/p&gt;

&lt;p&gt;Dentro de cada categoria existem vários sendo que a dos &lt;strong&gt;comparativos&lt;/strong&gt; não é excepção e hoje trago-vos dois operadores comparativos, muito parecidos&amp;hellip; ou talvez não: &lt;code&gt;==&lt;/code&gt; e &lt;code&gt;===&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Há já algum tempo que me questionava em relação ao uso de ambos os operadores pois não tinha a certeza de qual devia utilizar nas diversas situações que me apareciam.&lt;/p&gt;

&lt;p&gt;Depois de uma pequena pesquisa, encontrei esta tabela na resposta a uma pergunta no &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stackoverflow&lt;/a&gt; e tomei a liberdade de a transcrever para aqui:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&amp;mdash;&amp;ndash;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;false&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;null&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;array()&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&amp;ldquo;0&amp;rdquo;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;0x0&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&amp;ldquo;0x0&amp;rdquo;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&amp;ldquo;000&amp;rdquo;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&amp;ldquo;0000&amp;rdquo;&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;false&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;null&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;array()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&amp;ldquo;0&amp;rdquo;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;0x0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&amp;ldquo;0x0&amp;rdquo;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&amp;ldquo;000&amp;rdquo;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&amp;ldquo;0000&amp;rdquo;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Como assim? Essa tabela compara diversas possibilidades. &lt;code&gt;!=&lt;/code&gt; quer dizer que é diferente, e os outros dois? Aqui está a diferença entre &lt;code&gt;==&lt;/code&gt; e &lt;code&gt;===&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;==&lt;/code&gt; compara os valores das variáveis ou seja, a &lt;strong&gt;igualdade&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;===&lt;/code&gt; compara os valores das variáveis &lt;strong&gt;e&lt;/strong&gt; o tipo das mesmas ou seja, a &lt;strong&gt;identidade&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estes dois operadores têm dois opostos: o operador &lt;code&gt;!=&lt;/code&gt; e o operador &lt;code&gt;!==&lt;/code&gt; que comparam as mesmas coisas ou seja, o primeiro confirma se as variáveis &lt;strong&gt;não têm valores iguais&lt;/strong&gt; e o segundo verifica se &lt;strong&gt;não têm os valores, nem o tipo iguais&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;exemplo:b3314678417675fcb5ed0f3090572d89&#34;&gt;Exemplo&lt;/h2&gt;

&lt;p&gt;Assim podemos dizer, por exemplo,  que a comparação &lt;code&gt;&amp;quot;1&amp;quot; == 1&lt;/code&gt;  retorna &lt;code&gt;true&lt;/code&gt; mas que &lt;code&gt;&amp;quot;1&amp;quot; === 1&lt;/code&gt;  retorna &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Na primeira comparação só são comparados os valores das variáveis logo 1 é, realmente, igual a 1 daí retornar verdadeiro.&lt;/p&gt;

&lt;p&gt;Na segunda, os tipos também são comparados, enquanto que a primeira é uma string , a segunda é do tipo int  logo é falso apesar do conteúdo ser igual.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Esta explicação é equivalente para outras linguagens de programação como &lt;strong&gt;JavaScript&lt;/strong&gt;, por exemplo.&lt;/p&gt;

&lt;p&gt;Agora que já sei a diferença entre estes dois operadores, é hora de ir mudar alguns &amp;ldquo;==&amp;rdquo; e &amp;ldquo;===&amp;rdquo;.  Podes ler mais sobre operadores comparativos em PHP &lt;a href=&#34;http://au.php.net/manual/en/language.operators.comparison.php&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Operador Ternário ( ? ) em PHP</title>
      <link>https://henriquedias.com/explanations/operador-ternario</link>
      <pubDate>Tue, 22 Jul 2014 09:08:08 +0000</pubDate>
      
      <guid>https://henriquedias.com/explanations/operador-ternario</guid>
      <description>&lt;p&gt;Recentemente, escrevi um artigo onde explicava como fazer uma &lt;a href=&#34;https://henriquedias.com/tutorials/listagem-web-de-uma-tabela-mysql/&#34;&gt;listagem web de uma tabela MySQL&lt;/a&gt; onde utilizei um operador que não tinha a certeza absoluta do que fazia e deixei a explicação um pouco vaga.&lt;/p&gt;

&lt;p&gt;O operador em questão era o ponto de interrogação. Depois de uma pequena pesquisa, descobri que o seu nome é &lt;strong&gt;operador ternário&lt;/strong&gt; e é um operador condicional.&lt;/p&gt;

&lt;p&gt;Já utilizava este operador há algum tempo mas estava reticente em relação à sua sintaxe pois não tinha a certeza se o que estava a fazer estava 100% correto por isso decidi pesquisar.&lt;/p&gt;

&lt;p&gt;Este operador é excelente para pequenas e simples condições de &lt;code&gt;if else&lt;/code&gt; onde não pretendemos utilizar muitas linhas.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$url = isset($_GET[&amp;#39;url&amp;#39;]) ? $_GET[&amp;#39;url&amp;#39;] : null;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse excerto acima foi tirado do artigo que mencionei acima e faz o mesmo que o código abaixo:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;if (isset($_GET[&amp;#39;url&amp;#39;]) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;      $url = $_GET[&amp;#39;url&amp;#39;];&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;} else {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;      $url = null;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vendo isto, concluímos que o  operador ternário é mais simples de utilizar, porém um pouco mais difícil de ler.&lt;/p&gt;

&lt;p&gt;A palavra &amp;ldquo;ternário&amp;rdquo; provém de &amp;ldquo;três&amp;rdquo; e é utilizada neste operador porque este precisa de três argumentos. A sintaxe é a seguinte:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(CONDIÇÃO)  ? &amp;lt;O QUE FAZ SE FOR VERDADEIRO&amp;gt; : &amp;lt;O QUE FAZ SE FOR FALSO&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Abaixo encontra-se mais um pequeno exemplo:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$n = rand(0,100);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;if ($n &amp;gt; 50) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    echo &amp;#39;O número é maior que 50!&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;} else {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    echo &amp;#39;O número é menor que 50!&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//Utilizando o operador ternário ficaria:&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;echo ($n &amp;gt; 50) ? &amp;#39;O número é maior que 50!&amp;#39; : &amp;#39;O número é menor que 50!&amp;#39;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//O leitor Gustavo Rafael sugeriu uma forma mais simplificada:&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;echo &amp;#39;O número é &amp;#39; . (($n &amp;gt; 50) ? &amp;#39;maior&amp;#39; : &amp;#39;menor&amp;#39;) . &amp;#39; que 50!&amp;#39;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mais uma vez podemos concluir que utilizando  o operador ternário gastamos menos linhas e poupamos *bytes* no tamanho do ficheiro.&lt;/p&gt;

&lt;p&gt;Para saberem mais sobre operadores em PHP podem aceder a &lt;a href=&#34;http://br2.php.net/manual/en/language.operators.comparison.php&#34;&gt;esta página&lt;/a&gt; no guia oficial da linguagem. Este operador existe também em outras linguagens como C ou JS por exemplo.&lt;/p&gt;

&lt;p&gt;Espero que tenham gostado desta pequena explicação. :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Selecionar um intervalo de linhas em MySQL</title>
      <link>https://henriquedias.com/tutorials/selecionar-um-intervalo-de-linhas-em-mysql</link>
      <pubDate>Wed, 16 Jul 2014 20:00:19 +0000</pubDate>
      
      <guid>https://henriquedias.com/tutorials/selecionar-um-intervalo-de-linhas-em-mysql</guid>
      <description>

&lt;p&gt;O sistema de base de dados &lt;strong&gt;MySQL&lt;/strong&gt; é dos mais conhecidos mundialmente devido à sua facilidade, tanto de utilização como de implantação e ao facto de ser extremamente versátil.&lt;/p&gt;

&lt;p&gt;Quando estava a listar as linhas de uma tabela MySQL numa página web, deparei-me com um sobrecarregamento do CPU do meu computador, porque eu estava a listar &lt;strong&gt;todas&lt;/strong&gt; as linhas da tabela. De seguida pensei: &lt;strong&gt;porque não listo por páginas, cada página com &lt;code&gt;x&lt;/code&gt; linhas?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Utilizando este método, o processador ficaria menos carregado de processos, o que aumentaria a experiência do utilizador visto que este, além de receber uma resposta mais rápida, iria ver menos linhas numa página.&lt;/p&gt;

&lt;h2 id=&#34;limit-e-offset:6241c588b9b28774dab8c0fbe41a31f0&#34;&gt;LIMIT e OFFSET&lt;/h2&gt;

&lt;p&gt;Para limitar o número de resultados dados por uma consulta SQL num sistema MySQL a um intervalo de linhas, os comandos  LIMIT e OFFSET devem ser utilizados. Pode ver a consulta (&lt;em&gt;query&lt;/em&gt;) abaixo para um exemplo ilustrativo.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;`mytable`&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;LIMIT&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O resultado da consulta acima serão as primeiras 15 linhas da tabela &lt;code&gt;mytable&lt;/code&gt;. Mas, e se eu quiser as segundas 15 linhas e não as primeiras?&lt;/p&gt;

&lt;p&gt;Para o fazermos, apenas temos que utilizar o comando  OFFSET . Então, para obtermos as segundas quinze linhas de uma tabela MySQL, faríamos o seguinte:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;`mytable`&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;LIMIT&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OFFSET&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Em Português, &lt;em&gt;offset&lt;/em&gt; quer dizer deslocamento. Podemos então dizer que a &lt;em&gt;query&lt;/em&gt; está a ser deslocada para outro local da tabeça passando à frente das primeira 15 linhas, selecionando as segundas 15.&lt;/p&gt;

&lt;p&gt;Poderíamos ainda simplificar o código acima para o seguinte:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;`mytable`&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;LIMIT&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Estes comandos podem ser utilizados com outros como o WHERE .&lt;/p&gt;

&lt;p&gt;Em breve irei lançar um tutorial que explique como criar uma listagem de uma tabela, com páginas utilizando PHP, HTML e MySQL. Este sistema irá contar com um número fixo de linhas por página, botões de navegação e forma de impedir que o utilizador tente aceder páginas inexistentes.&lt;/p&gt;

&lt;p&gt;Espero que esta explicação vos tenha sido útil que voltem a visitar o blog :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Remover hash dos links &#34;Continuar a Ler&#34;</title>
      <link>https://henriquedias.com/tutorials/remover-hash-dos-links-continuar-a-ler</link>
      <pubDate>Mon, 14 Jul 2014 13:36:38 +0000</pubDate>
      
      <guid>https://henriquedias.com/tutorials/remover-hash-dos-links-continuar-a-ler</guid>
      <description>

&lt;p&gt;O &lt;strong&gt;WordPress&lt;/strong&gt; é um dos CMS (Sistema de Gestão de Conteúdo, em português) mais conhecidos do mundo, porque é muito simples de utilizar e tem milhares de temas e &lt;em&gt;plugins&lt;/em&gt; gratuitos e pagos à disposição do utilizador.&lt;/p&gt;

&lt;p&gt;Por vezes precisamos de melhorar os temas ou alguma outra coisa. Quando estava a desenvolver o tema deste blog deparei-me com um simples problema: os links dos botões &amp;ldquo;Continuar a Ler&amp;rdquo; levavam o utilizador ao local onde havia colocado o código, mas eu não queria que isso acontecesse.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://henriquedias.com/images/hash-links-wp.png&#34; alt=&#34;Remover hash dos links &amp;quot;Continuar a Ler&amp;quot;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Depois de uma rápida pesquisa deparei-me com um fórum onde explicavam, em Inglês, como proceder. Afinal é bastante simples. No ficheiro &lt;code&gt;functions.php&lt;/code&gt; do vosso tema basta colarem o seguinte código:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;function remove_more_link_scroll( $link ) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  $link = preg_replace( &amp;#39;|#more-[0-9]+|&amp;#39;, &amp;#39;&amp;#39;, $link );&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  return $link;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;add_filter( &amp;#39;the_content_more_link&amp;#39;, &amp;#39;remove_more_link_scroll&amp;#39; );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sim, está bem, mas o que faz realmente esse código? Vamos começar por analisar o que existe dentro da função &lt;code&gt;remove_more_link_scroll()&lt;/code&gt;. Esta aceita uma variável a que vamos chamar &lt;code&gt;$link&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;explicação:3e711b92a5df38110639b52a97a9737f&#34;&gt;Explicação&lt;/h2&gt;

&lt;p&gt;Assim, vamos começar pela função &lt;code&gt;preg_replace()&lt;/code&gt;. Esta aceita três argumentos sendo o primeiro uma expressão regular, o segundo o substituto e o terceiro o texto. Esta função pesquisa no texto a expressão regular e substitui-a.&lt;/p&gt;

&lt;p&gt;Neste caso, a função &lt;code&gt;preg_replace()&lt;/code&gt; substitui no &lt;code&gt;$link&lt;/code&gt;  todos os caracteres possíveis na expressão &lt;code&gt;#more-[0-9]+&lt;/code&gt; por &amp;ldquo; ou seja, nada. Depois disso, a função retorna o link sem a hash que direciona para a âncora.&lt;/p&gt;

&lt;p&gt;Dentro da expressão regular que está contida na função, temos vários &amp;ldquo;locais&amp;rdquo; a destacar. Os caracteres que se encontram no início e no final (&lt;code&gt;|&lt;/code&gt;) servem para delimitar o início e o fim da expressão de forma a que o PHP a consiga detetar.&lt;/p&gt;

&lt;p&gt;O texto #more-  corresponde ao início da hash do link. O WordPress faz as âncoras de ler mais iniciando por &lt;code&gt;#more-&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O resto, &lt;code&gt;[0-9]+&lt;/code&gt;, quer dizer que procura por qualquer número entre 0 e 9 e fá-lo mais do que uma vez.&lt;/p&gt;

&lt;p&gt;Depois desta função, nós temos que a adicionar aos filtros do WordPress e, para isso, utilizamos as funções próprias do WordPress que, neste caso é a &lt;code&gt;add_filter()&lt;/code&gt;. Esta aceita quatro argumentos mas só vamos falar de 2 que são os únicos obrigatórios. Se quiseres saber mais sobre a adição de filtros aos temas no WordPress podes aceder a &lt;a href=&#34;http://codex.wordpress.org/Function_Reference/add_filter&#34;&gt;esta página&lt;/a&gt; do site do WP em inglês.&lt;/p&gt;

&lt;p&gt;O primeiro é a tag que, neste caso é &amp;lsquo;the_content_more_link&amp;rsquo; . Podes obter mais informações sobre estas tags &lt;a href=&#34;http://codex.wordpress.org/Plugin_API/Filter_Reference&#34;&gt;aqui&lt;/a&gt;. O segundo argumento é a função a adicionar, que é a função que criámos antes.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Sei que é uma dica simples mas de certeza que vai ajudar alguém tal como me ajudou a mim :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>