<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Henrique Dias</title>
    <link>http://localhost:1313/tags/javascript/</link>
    <description>Recent content in Javascript on Henrique Dias</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Mar 2015 18:55:49 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to create a Node.js command-line application</title>
      <link>http://localhost:1313/tutorials/how-to-create-a-node-js-command-line-application</link>
      <pubDate>Tue, 31 Mar 2015 18:55:49 +0000</pubDate>
      
      <guid>http://localhost:1313/tutorials/how-to-create-a-node-js-command-line-application</guid>
      <description>

&lt;p&gt;Nowadays, &lt;strong&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;node.js&lt;/a&gt;&lt;/strong&gt; is one of the technologies which is always talked about when the subject is related with real-time applications or even &lt;a href=&#34;http://en.wikipedia.org/wiki/Command-line_interface&#34;&gt;CLI &lt;/a&gt;(Command-line interface) apps.&lt;/p&gt;

&lt;p&gt;Node.js is a cross-platform platform (which is very redundant) built on Chrome&amp;rsquo;s JavaScript runtime. They say that with Node.js we can create network applications, but we can do a lot more.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/tutorials/como-utilizar-o-bower-um-gestor-de-pacotes-web/&#34;&gt;Bower&lt;/a&gt;, for example, is a very useful tool built in the top of node.js. We can take advantage of the fact of node.js be cross-platform to create CLI apps which can serve  everyone.&lt;/p&gt;

&lt;p&gt;CLI application can be very useful to task automation, to do repetitive tasks we do everyday, etc. Bower, that I&amp;rsquo;ve already mentioned, is useful because it installs and updates all of the front-end dependencies automatically.&lt;/p&gt;

&lt;p&gt;So, the purpose of this article is helping you creating a command-line interface application with node.js.&lt;/p&gt;

&lt;h2 id=&#34;is-everything-ok:2cf2d4fc691211667baf098cd3988ead&#34;&gt;Is everything ok?&lt;/h2&gt;

&lt;p&gt;To begin, you should have both node.js and npm installed on your computer. The current versions of node.js already have npm build-in. Npm is the official node package manager.&lt;/p&gt;

&lt;p&gt;You can download node.js from this website. After installed, you should check if the node.js and npm are correctly installed on your computer. To do that, you can, for example, run the following commands to see the current installed version of each thing:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&amp;gt; node --version
&amp;gt; npm --version
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If both commands return something like v0.12.0 and 2.5.1, everything is ready to be used.&lt;/p&gt;

&lt;h2 id=&#34;initialize-the-package:2cf2d4fc691211667baf098cd3988ead&#34;&gt;Initialize the package&lt;/h2&gt;

&lt;p&gt;Now, let&amp;rsquo;s create our first node.js command-line application with node.js. First of all, go the directory where you want to save the code of the application. Run the following commands:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&amp;gt; mkdir mycliapp
&amp;gt; &lt;span class=&#34;nb&#34;&gt;cd &lt;/span&gt;mycliapp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course you can replace mycliapp  with whatever you want. Now, we have to create a &lt;code&gt;package.json&lt;/code&gt; file which contains the &lt;a href=&#34;http://en.wikipedia.org/wiki/Metadata&#34;&gt;meta information&lt;/a&gt; of the application. It can be done automatically:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&amp;gt; npm init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After running the previous command, you should put the information you want for the package. If the information between parentheses is correct, you just have to press enter.&lt;/p&gt;

&lt;p&gt;Now, you should have something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;mycliapp&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;This is my first cli application.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;index.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Henrique Dias &amp;lt;hacdias@gmail.com&amp;gt; (http://henriquedias.com)&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;license&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;MIT&amp;quot;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I think almost all of the content of that file is self-explanatory. If you have some doubt, search in &lt;a href=&#34;https://docs.npmjs.com/files/package.json&#34;&gt;this page&lt;/a&gt;. Right now, we are going to ignore the &lt;code&gt;index.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Now, and because it is a command-line application, we should add two other informations to the &lt;code&gt;package.json&lt;/code&gt; file:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;preferGlobal&amp;quot;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;quot;bin&amp;quot;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;mycliapp&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;./bin/mycliapp&amp;quot;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first one (preferGlobal ) that advises the user that this app should be installed globally, it means, available in the all system.&lt;/p&gt;

&lt;p&gt;The second one, bin , is used to tell the commands which will be available to use. In this example we have the command &lt;code&gt;mycliapp&lt;/code&gt; associated with the file located at &lt;code&gt;bin/mycliapp.js&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;output-some-data:2cf2d4fc691211667baf098cd3988ead&#34;&gt;Output some data&lt;/h2&gt;

&lt;p&gt;Then we are going to create the &lt;code&gt;bin/mycliapp.js&lt;/code&gt; file which will have all of the application logic (in this case, it can be divided into various files). Create it, and simply add the following line of code to print an Hello World:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, link your app with npm to run it locally. Do it using this command:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&amp;gt; npm link
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After that, you should be able to run the command &lt;code&gt;mycliapp&lt;/code&gt; in the console. Run it and you should receive the message &amp;ldquo;Hello, world!&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;get-data-from-user:2cf2d4fc691211667baf098cd3988ead&#34;&gt;Get data from user&lt;/h2&gt;

&lt;p&gt;Now we already know how to output some information (simply using &lt;code&gt;console.log()&lt;/code&gt;). So now we are going to learn how to get data from the user.&lt;/p&gt;

&lt;p&gt;There are some packages which help us to make question to the user, but we will use the built-in module readline which is very simple to use.&lt;/p&gt;

&lt;p&gt;Firstly, we need to include that module. To do that, we may do something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;readline&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we have to create the interface to make the question, it means that we are going to set the input and output of data.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createInterface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stdin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stdout&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;process&lt;/code&gt; (read more &lt;a href=&#34;https://nodejs.org/api/process.html#process_process&#34;&gt;here&lt;/a&gt;) is a global object variable which is an instance of &lt;a href=&#34;https://nodejs.org/api/process.html#process_process&#34;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So now that we already have the input and output setted up, we can make a question to the user and then receive the answer. We should use this syntax:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;question&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To ask the user his name and then print it, you may do something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;question&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;What is your name? &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;answer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// close the instance of reading interface&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;answer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is very simples as you can see. Never forget to close the instance of the reading interface. After that you can do whatever you want with the answer of the user.&lt;/p&gt;

&lt;p&gt;You can get more information about this module &lt;a href=&#34;https://nodejs.org/api/readline.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-to-read-arguments:2cf2d4fc691211667baf098cd3988ead&#34;&gt;How to read arguments&lt;/h2&gt;

&lt;p&gt;There are a lot of ways to read arguments. There&amp;rsquo;s some third-party packages which helps the user doing it, like &lt;a href=&#34;https://www.npmjs.com/package/commander&#34;&gt;&lt;code&gt;commander&lt;/code&gt;&lt;/a&gt;, but we are going to do it manually to see how does it work.&lt;/p&gt;

&lt;p&gt;Remember the process  object? It also contains the arguments. Let&amp;rsquo;s experiment. Write the following code of line in bin/mycliapp. You might remove all of the previous code or comment it.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, run the application, putting some arguments, options, commands after the app name.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&amp;gt; mycliapp option1 henrique
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;node&amp;#39;&lt;/span&gt;,
 &lt;span class=&#34;s1&#34;&gt;&amp;#39;C:\\Users\\Henrique\\AppData\\Roaming\\npm\\node_modules\\mycliapp\\bin\\mycliapp&amp;#39;&lt;/span&gt;,
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;option1&amp;#39;&lt;/span&gt;,
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;henrique&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, the first element of our arguments array is the environment, in this case, node. The second one is the path of the file which is running. The following elements are the other arguments.&lt;/p&gt;

&lt;p&gt;If you just want the arguments put by the user you may do something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;splice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// remove 2 elements after the position 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you print the content of args  variable you will see that it only contains the arguments that the user wrote.&lt;/p&gt;

&lt;p&gt;Now, if you want, for example, to print &amp;ldquo;Hello&amp;rdquo; when the user uses the argument &lt;code&gt;sayhello&lt;/code&gt; , you can do this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;sayhello&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simple, but effective.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now, go on and create your CLI application with Node.js :)&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this tutorial of how to create node.js command-line applications. If you have some doubts, you may use the comments or the &lt;a href=&#34;http://localhost:1313/contact/&#34;&gt;contact page&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como utilizar o Bower, um gestor de pacotes web</title>
      <link>http://localhost:1313/tutorials/como-utilizar-o-bower-um-gestor-de-pacotes-web</link>
      <pubDate>Mon, 18 Aug 2014 12:01:12 +0000</pubDate>
      
      <guid>http://localhost:1313/tutorials/como-utilizar-o-bower-um-gestor-de-pacotes-web</guid>
      <description>&lt;p&gt;O &lt;strong&gt;Bower&lt;/strong&gt; é um excelente gestor de pacotes web. Utilizando este gestor, torna-se mais fácil e prático adicionar e atualizar as diversas bibliotecas que utilizamos nos nossos sites/web-apps.&lt;/p&gt;

&lt;p&gt;Hoje vamos instalar o Bower e depois vamos criar um ficheiro para gerir os pacotes de um site de exemplo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/bower.jpg&#34; alt=&#34;Como utilizar o Bower, um gestor de pacotes web&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Utilizar o &lt;a href=&#34;http://bower.io/&#34;&gt;Bower&lt;/a&gt; é bastante simples. Vamos começar com os requisitos. Para podermos utilizar este gestor de pacotes, temos que ter instalado o &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;  no nosso computador. Podem descarregar o Node.js no site oficial.&lt;/p&gt;

&lt;p&gt;Depois de terem o node.js instalado no vosso computador, vamos instalar o Bower. Para isso, abram a linha de comandos do vosso SO, se for Windows corram como Administrador e escrevam o seguinte:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;npm install -g bower
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora, existem várias formas de fazer o dowload dos pacotes que precisamos no nosso projeto. Nós vamos começar por analisar as &amp;ldquo;menos divertidas&amp;rdquo; e depois passaremos à que, talvez, possa ser considerada a &amp;ldquo;melhor&amp;rdquo;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;# Instala através do ficheiro bower.json&lt;/span&gt;
bower install
&lt;span class=&#34;c&#34;&gt;# Instala um pacote específico&lt;/span&gt;
bower install package
&lt;span class=&#34;c&#34;&gt;# Instala uma versão específica de um pacote&lt;/span&gt;
bower install package#version
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como podem ver, existem essas três formas mencionadas acima. Podemos substituir &lt;strong&gt;package&lt;/strong&gt; por diversos itens como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nome do pacote como angularjs&lt;/li&gt;
&lt;li&gt;Ficheiro zip ou tar remoto ou local&lt;/li&gt;
&lt;li&gt;Repositório Git remoto ou local&lt;/li&gt;
&lt;li&gt;Atalho para repositórios do GitHub&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assim, para instalar o jQuery, basta correr o seguinte comando para que seja criada uma pasta no caminho &lt;strong&gt;bower_components\jquery&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;bower install jquery
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora vamos criar um ficheiro chamado &lt;code&gt;bower.json&lt;/code&gt; para descarregar a versão 1.11.0 do jQuery e a versão mais recente do &lt;strong&gt;angular.js&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;projeto-x&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;jquery&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;1.11.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;angular&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;master&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora basta correr o seguinte comando para efetuar o download dos pacotes:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;bower install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora, imaginando que saia uma nova versão do angular.js, bastava correr o seguinte comando para atualizar o angular e manter o jQuery na mesma versão:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;bower update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como podem ver, é bastante simples fazer o download de pacotes utilizando o Bower. Para os chamar através do HTML basta fazermos como sempre: utilizar as tags &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; e utilizar o URL absoluto ou relativo para o local onde estão os ficheiros.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Diferenças entre &#39;==&#39; e &#39;===&#39; em PHP</title>
      <link>http://localhost:1313/explanations/diferencas-entre-igual-identico-php</link>
      <pubDate>Wed, 23 Jul 2014 18:31:23 +0000</pubDate>
      
      <guid>http://localhost:1313/explanations/diferencas-entre-igual-identico-php</guid>
      <description>

&lt;p&gt;É habitual utilizarem-se diversos operadores quando o assunto é programação. Existem vários até: aritméticos, comparativos e outros.&lt;/p&gt;

&lt;p&gt;Dentro de cada categoria existem vários sendo que a dos &lt;strong&gt;comparativos&lt;/strong&gt; não é excepção e hoje trago-vos dois operadores comparativos, muito parecidos&amp;hellip; ou talvez não: &lt;code&gt;==&lt;/code&gt; e &lt;code&gt;===&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Há já algum tempo que me questionava em relação ao uso de ambos os operadores pois não tinha a certeza de qual devia utilizar nas diversas situações que me apareciam.&lt;/p&gt;

&lt;p&gt;Depois de uma pequena pesquisa, encontrei esta tabela na resposta a uma pergunta no &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stackoverflow&lt;/a&gt; e tomei a liberdade de a transcrever para aqui:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&amp;mdash;&amp;ndash;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;false&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;null&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;array()&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&amp;ldquo;0&amp;rdquo;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;0x0&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&amp;ldquo;0x0&amp;rdquo;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&amp;ldquo;000&amp;rdquo;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&amp;ldquo;0000&amp;rdquo;&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;false&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;null&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;array()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&amp;ldquo;0&amp;rdquo;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;0x0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&amp;ldquo;0x0&amp;rdquo;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&amp;ldquo;000&amp;rdquo;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&amp;ldquo;0000&amp;rdquo;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Como assim? Essa tabela compara diversas possibilidades. &lt;code&gt;!=&lt;/code&gt; quer dizer que é diferente, e os outros dois? Aqui está a diferença entre &lt;code&gt;==&lt;/code&gt; e &lt;code&gt;===&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;==&lt;/code&gt; compara os valores das variáveis ou seja, a &lt;strong&gt;igualdade&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;===&lt;/code&gt; compara os valores das variáveis &lt;strong&gt;e&lt;/strong&gt; o tipo das mesmas ou seja, a &lt;strong&gt;identidade&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estes dois operadores têm dois opostos: o operador &lt;code&gt;!=&lt;/code&gt; e o operador &lt;code&gt;!==&lt;/code&gt; que comparam as mesmas coisas ou seja, o primeiro confirma se as variáveis &lt;strong&gt;não têm valores iguais&lt;/strong&gt; e o segundo verifica se &lt;strong&gt;não têm os valores, nem o tipo iguais&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;exemplo:b3314678417675fcb5ed0f3090572d89&#34;&gt;Exemplo&lt;/h2&gt;

&lt;p&gt;Assim podemos dizer, por exemplo,  que a comparação &lt;code&gt;&amp;quot;1&amp;quot; == 1&lt;/code&gt;  retorna &lt;code&gt;true&lt;/code&gt; mas que &lt;code&gt;&amp;quot;1&amp;quot; === 1&lt;/code&gt;  retorna &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Na primeira comparação só são comparados os valores das variáveis logo 1 é, realmente, igual a 1 daí retornar verdadeiro.&lt;/p&gt;

&lt;p&gt;Na segunda, os tipos também são comparados, enquanto que a primeira é uma string , a segunda é do tipo int  logo é falso apesar do conteúdo ser igual.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Esta explicação é equivalente para outras linguagens de programação como &lt;strong&gt;JavaScript&lt;/strong&gt;, por exemplo.&lt;/p&gt;

&lt;p&gt;Agora que já sei a diferença entre estes dois operadores, é hora de ir mudar alguns &amp;ldquo;==&amp;rdquo; e &amp;ldquo;===&amp;rdquo;.  Podes ler mais sobre operadores comparativos em PHP &lt;a href=&#34;http://au.php.net/manual/en/language.operators.comparison.php&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chamadas Ajax com jQuery e PHP</title>
      <link>http://localhost:1313/tutorials/chamadas-ajax-com-jquery-e-php</link>
      <pubDate>Sun, 20 Jul 2014 10:41:11 +0000</pubDate>
      
      <guid>http://localhost:1313/tutorials/chamadas-ajax-com-jquery-e-php</guid>
      <description>&lt;p&gt;A biblioteca &lt;a href=&#34;http://jquery.com/&#34;&gt;jQuery&lt;/a&gt; é das mais conhecidas e utilizadas em JavaScript. Com esta biblioteca podemos proceder a chamadas &lt;strong&gt;ajax&lt;/strong&gt; muito facilmente através de poucas linhas de código.&lt;/p&gt;

&lt;p&gt;Vamos aprender a efetuar pedidos POST e GET com Ajax, obtendo os dados do lado do servidor utilizando PHP e responder a essa mesma chamada.&lt;/p&gt;

&lt;p&gt;Iremos analisar um exemplo prático: um  formulário de registo ou inscrição  utilizando as tags &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; do HTML, Ajax para enviar os pedidos para o servidor e  PHP processar os dados e enviar a resposta novamente para o lado do cliente onde será mostrada uma mensagem de sucesso ou erro conforme o sucedido.&lt;/p&gt;

&lt;p&gt;Como vamos utilizar o método Ajax do jQuery, temos que importar, em primeiro lugar, a biblioteca jQuery. Na secção &lt;head&gt;  do vosso ficheiro onde vai estar o registo - vou chamar-lhe &lt;code&gt;index.html&lt;/code&gt; - devem colocar o seguinte código:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;src=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse pequeno trecho importa a versão 2.1.1 do jQuery e está armazenada nos servidores da Google e o seu uso é livre e qualquer um pode utilizar. Para criar o formulário de registo, vamos utilizar as tags &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; do HTML, criando assim, algo semelhante ao seguinte:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Formulário de Registo&lt;span class=&#34;nt&#34;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;registo&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;method=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;post&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;action=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;javascript:enviarRegisto();&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;

	&lt;span class=&#34;nt&#34;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;nome&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;nome&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Nome&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Password&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Email&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Submeter&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O título não é necessário para o  pleno funcionamento do formulário. Como podem ver, todos os &lt;inputs&gt;  estão identificados com um id. No final encontra-se um botão para submeter o formulário. Este botão direciona para a ação do formulário que, neste caso, é javascript:enviarRegisto(); .&lt;/p&gt;

&lt;p&gt;O método (method) não é necessário visto que este vai ser definido diretamente através do pedido em Ajax. Agora vamos à parte do servidor - registar o utilizador. Vamos criar um ficheiro com o nome &lt;code&gt;processar.php&lt;/code&gt; o mesmo local onde temos o nosso &lt;code&gt;index.html&lt;/code&gt;. Neste ficheiro teremos o código seguinte ou semelhante:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Receber os dados do formulário através&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * de informações enviadas pelo ajax com&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * o método POST.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$nome&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;nome&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$password&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$email&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Criação de uma variável que mais tarde irá&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * guardar o resultado da operação: se foi concluída&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * com sucesso ou não.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$resultado&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Ligação à base de dados utilizando PDO. Eu, por exemplo,&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * utilizei SQLite mas  pode ser utilizado qualquer outro tipo&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * de bases de dado.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$db&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PDO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sqlite:db.sqlite&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;


&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Query/Chamada para inserir os dados que obtemos via POST&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * na base de dados.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$query&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;INSERT INTO utilizadores VALUES (&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$nome&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;#39;, &amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$password&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;#39;, &amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$email&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;#39;);&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$db&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;	 * Se a chamada for concluída com  sucesso,&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;	 * será atribuído o valor &amp;quot;true&amp;quot; ao elemento&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;	 * status da array $resultado.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;	 */&lt;/span&gt;

	&lt;span class=&#34;nv&#34;&gt;$resultado&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;//Caso contrário será falso.&lt;/span&gt;

	&lt;span class=&#34;nv&#34;&gt;$resultado&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Informa que o arquivo vai ser do tipo Json.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Assim, o Ajax vai conseguir receber a resposta&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * corretamente.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-type: application/json&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Envio da array $resultado novamente para o lado do cliente&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * em  formato json.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;json_encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$resultado&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podes ler mais sobre o formato &lt;strong&gt;json&lt;/strong&gt; &lt;a href=&#34;http://json.org/&#34;&gt;aqui&lt;/a&gt;. Antes de continuarmos, vamos estabelecer as diferenças entre os métodos POST e GET. Talvez a maior diferença entre estes dois métodos seja a visibilidade. O método &lt;strong&gt;GET&lt;/strong&gt; leva a informação &amp;ldquo;agarrada&amp;rdquo; ao URL e qualquer pessoa pode ver. Os URLs com informações anexadas são do seguinte formato:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://example.com?infoNome=info&amp;amp;infoNome2=info2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Por outro lado, o método &lt;strong&gt;POST &lt;/strong&gt;leva a informação encapsulada no corpo do pedido e não pode visualizada. Uma desvantagem deste método é ser mais lento visto que é encapsulado ao contrário do GET, que é mais simples. Como os pedidos GET são feitos através do URL, existe uma limitação no comprimento da mensagem enviada sendo que não pode ter mais de 255 caracteres dependendo do browser.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;tipo de dados&lt;/strong&gt; é outra grande diferença: enquanto que o método GET só pode enviar texto, o método POST pode enviar qualquer tipo de informação. Podes saber mais sobre estes dois métodos &lt;a href=&#34;http://www.w3schools.com/tags/ref_httpmethods.asp&#34;&gt;aqui&lt;/a&gt;. Agora que já temos o formulário de registo e o servidor preparado, só falta fazer a ligação entre o cliente e o servidor utilizando Ajax.&lt;/p&gt;

&lt;p&gt;Em primeiro lugar, criamos um novo ficheiro chamado, por exemplo, &lt;code&gt;script.js&lt;/code&gt; e chamomo-lo logo a seguir ao jQuery no nosso &lt;code&gt;index.html&lt;/code&gt; com um código semelhante ao seguinte:Agora, dentro do ficheiro de javascript, vamos ter que criar a função que anteriormente colocámos na ação do formulário, a função enviarRegisto().&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;enviarRegisto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;     * Obtenção dos dados do formulário e colocação dos mesmos&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;     * no formato nomeDaInfo=Info para enviar por POST.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;     *&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;     * Utiliza-se a função val() para obter os valores&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;     * dos inputs com os id&amp;#39;s em questão.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;


    &lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;     * Criação da variável data que vai conter toda a informação&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;     * a enviar para o servidor.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;#registo&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;     * Podemos também definir a variável data da seguinte forma:&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;     *&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;     * nome = &amp;#39;nome=&amp;#39; + $(&amp;#39;#nome&amp;#39;).val();&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;     * password = &amp;#39;password=&amp;#39; + $(&amp;#39;#password&amp;#39;).val();&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;     * email = &amp;#39;email=&amp;#39; + $(&amp;#39;#email&amp;#39;).val();&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;     *&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;     * data = nome + &amp;#39;&amp;amp;&amp;#39; + password + &amp;#39;&amp;amp;&amp;#39; + email;&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;//Começa aqui o pedido ajax&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ajax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//Tipo do pedido que, neste caso, é POST&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;         * URL do ficheiro que para o qual iremos enviar os dados.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;         * Pode ser um url absoluto ou relativo.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;         */&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;processar.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//Que dados vamos enviar? A variável &amp;quot;data&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//O tipo da informação da resposta&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;dataType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

        &lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;         * Quando a chamada Ajax é terminada com sucesso,&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;         * o javascript confirma o status da operação&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;         * com a variável que enviámos no formato json.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;         */&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//Se for positivo, mostra ao utilizador uma janela de sucesso.&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Registo bem Sucedido!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;//Caso contrário dizemos que aconteceu algum erro.&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Uups! Ocorreu algum erro!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;desc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;         * Caso haja algum erro na chamada Ajax,&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;         * o utilizador é alertado e serão enviados detalhes&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;         * para a consola javascript que pode ser visualizada&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;         * através das ferramentas de desenvolvedor do browser.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;         */&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Uups! Ocorreu algum erro!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Detalhes: &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;desc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;nErro:&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Relembro que todo o código neste artigo é para fins demonstrativos e que para fins profissionais devem ser aplicadas medidas de segurança de forma a que terceiros não consigam obter os dados que estão a ser transmitidos.&lt;/p&gt;

&lt;p&gt;Depois de guardar o ficheiro, podemos abrir o formulário, preenchê-lo, enviá-lo e ver se tudo foi bem sucedido.&lt;/p&gt;

&lt;p&gt;Qualquer dúvida que tenham procurado e não tenham conseguido resolver, não hesitem em perguntar mas nunca se esqueçam: antes de &lt;strong&gt;perguntar&lt;/strong&gt;, devem &lt;strong&gt;procurar&lt;/strong&gt; e &lt;strong&gt;tentar &lt;/strong&gt;porque só assim é que vão realmente compreender a 100% :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/downloads/post-get-ajax-resposta-php.zip&#34;&gt;Download&lt;/a&gt; | &lt;a href=&#34;http://localhost:1313/downloads/post-get-ajax-resposta-php-comentado.zip&#34;&gt;Download (Comentado)&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
