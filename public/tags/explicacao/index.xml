<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Explicacao on Henrique Dias</title>
    <link>http://localhost:1313/tags/explicacao/</link>
    <description>Recent content in Explicacao on Henrique Dias</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Jun 2015 15:01:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/explicacao/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PHP - Diferenças entre &#39;&amp;&amp;/||&#39; e &#39;AND/OR&#39;</title>
      <link>http://localhost:1313/explanations/php-diferencas-operadores-logicos-precedencia</link>
      <pubDate>Wed, 10 Jun 2015 15:01:00 +0000</pubDate>
      
      <guid>http://localhost:1313/explanations/php-diferencas-operadores-logicos-precedencia</guid>
      <description>&lt;p&gt;Há alguns dias publiquei um artigo onde expliquei as &lt;a href=&#34;http://localhost:1313/explanations/diferencas-entre-igual-identico-php/&#34;&gt;diferenças entre os operadores &lt;code&gt;==&lt;/code&gt; e &lt;code&gt;===&lt;/code&gt;&lt;/a&gt;. Depois de partilhar esse artigo no Google Plus, a comunidade &lt;a href=&#34;https://plus.google.com/communities/106163623473782778474&#34;&gt;PHP Brasil&lt;/a&gt; sugeriu-me que falasse sobre as diferenças entre os operadores &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;/&lt;code&gt;||&lt;/code&gt; e &lt;code&gt;AND&lt;/code&gt;/&lt;code&gt;OR&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Depois de ter pesquisado sobre estes quatro operadores, descobri que sim, realmente &lt;strong&gt;existem diferenças entre&lt;/strong&gt; esses dois conjuntos de operadores.&lt;/p&gt;

&lt;p&gt;Para exemplificar, vamos utilizar valores &lt;strong&gt;booleanos&lt;/strong&gt;, ou seja, &lt;code&gt;false&lt;/code&gt; e &lt;code&gt;true&lt;/code&gt; (ou 0 e 1, respetivamente), e os operadores &lt;code&gt;AND&lt;/code&gt; e &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Em primeiro lugar, vamos declarar duas variáveis, uma que seja igual a true  e outra igual a false como as seguintes:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$verdadeiro = true;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$falso = false;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Antes de continuarmos, vou recordar algo parecido às regras da multiplicação/divisão com sinais diferentes, mas aqui para verdadeiros e falsos:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;true&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;false&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;true&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;false&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Esta tabela mostra o resultado de comparações feitas entre os vários valores booleanos. Continuando agora com o &amp;ldquo;nosso&amp;rdquo; PHP, vamos definir uma variável chamada, por exemplo, $comparacao e igualá-la a comparações entre as variáveis booleanas anteriormente definidas.&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$comparacao = $verdadeiro &amp;amp;&amp;amp; $falso;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Assim, concluímos que a variável &lt;code&gt;$comparacao&lt;/code&gt;  é igual a falso. Vamos agora utilizar o operador AND.&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$comparacao = $verdadeiro AND $falso;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Olhando para a tabela e para a igualdade, pensamos logo que $comparacao  é igual a falso mas&amp;hellip; está &lt;strong&gt;errado!&lt;/strong&gt; &lt;code&gt;$comparacao&lt;/code&gt;  é agora igual a &lt;strong&gt;verdadeiro&lt;/strong&gt;. Mas como assim?&lt;/p&gt;

&lt;p&gt;Isto acontece devido ao &lt;strong&gt;&lt;a href=&#34;http://php.net/manual/pt_BR/language.operators.precedence.php&#34;&gt;nível de precedência&lt;/a&gt;&lt;/strong&gt; dos operadores, ou seja, quando existe mais do que um operador num comando, existem níveis de prioridade sendo uns executados antes do que outros.&lt;/p&gt;

&lt;p&gt;As duas linhas acima são equivalentes às seguintes, respetivamente:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$comparacao = ( $verdadeiro &amp;amp;&amp;amp; $falso );&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;( $comparacao = $verdadeiro ) AND $falso;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;O nível de precedência do operador &lt;code&gt;=&lt;/code&gt;  é mais elevado que o do operador &lt;code&gt;AND&lt;/code&gt;. Porém, o nível de precedência do operador &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; é mais elevado que o de &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Podemos exemplificar isto dos níveis de precedência utilizando matemática. Se escrevermos &lt;code&gt;5 + 2 * 4&lt;/code&gt;, automaticamente sabemos que vamos efetuar primeiro a multiplicação e só depois a adição, resultando em 13 ou seja, a multiplicação tem prioridade em relação à adição. Assim, &lt;code&gt;5 + 2 * 4 = 5 + (2 * 4)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Só colocando parênteses é que podemos efetuar primeiro a adição e depois a multiplicação: (5 + 2) * 4 . Esta última já resulta em 28.&lt;/p&gt;

&lt;p&gt;O mesmo acontece com os operadores &lt;code&gt;OR&lt;/code&gt; e &lt;code&gt;||&lt;/code&gt; sendo que o segundo tem um nível de precedência mais elevado que o primeiro. Acrescento ainda que esta explicação é válida para outras linguagens de programação, como Ruby, por exemplo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP - (Algumas) tags dos DOCBlocks</title>
      <link>http://localhost:1313/explanations/php-tags-docblocks</link>
      <pubDate>Mon, 11 Aug 2014 20:26:21 +0000</pubDate>
      
      <guid>http://localhost:1313/explanations/php-tags-docblocks</guid>
      <description>&lt;p&gt;Para quem desenvolve aplicações em PHP com outras pessoas ou mesmo sozinho, por vezes precisa de colocar &lt;strong&gt;comentários&lt;/strong&gt; em vários locais para identificar os diversos processos que vão ocorrendo.&lt;/p&gt;

&lt;p&gt;Os &lt;strong&gt;DocBlocks&lt;/strong&gt; são (quase) fundamentais na vida dos programadores e estão disponíveis em várias linguagens. Vamos analisar as &lt;strong&gt;tags&lt;/strong&gt; que existem nos de PHP e como os utilizar.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://localhost:1313/images/docblockstag.jpg&#34; alt=&#34;PHP - (Algumas) tags dos DOCBlocks&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Os DocBlocks em PHP são parte do PHPDoc, uma adaptação do sistema &lt;strong&gt;javadoc&lt;/strong&gt; para a linguagem de programação PHP.&lt;/p&gt;

&lt;p&gt;Os DocBlocks, ao contrário dos comentários tradicionais, começam sempre por &lt;code&gt;/**&lt;/code&gt; ao invés de &lt;code&gt;/*&lt;/code&gt; ou &lt;code&gt;//&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Estes blocos documentam o código a que precedem. Abaixo podem ver um simples exemplo:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Função lorem faz x,y,z&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @param    string $sth    Descrição do param&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @return    string        Descrição do retorno&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;function lorem($sth = &amp;#39;&amp;#39;) {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    if (!is_string($sth)) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        return &amp;#39;Fail&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    return $sth;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Normalmente, a estrutura destes blocos de documentação é:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Descrição curta&lt;/li&gt;
&lt;li&gt;Descrição longa&lt;/li&gt;
&lt;li&gt;Tags
Hoje vamos analisar o último ponto: as &lt;strong&gt;tags&lt;/strong&gt;. Existem imensas e vamos apenas ver as principais e mais utilizadas.&lt;/li&gt;
&lt;/ul&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @author        Nome Do Autor &amp;lt;email@do.autor&amp;gt;    -&amp;gt; Autor do ficheiro&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @copyright     Nome Data                         -&amp;gt; Info da Copyright&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @param         tipo [$nome-da-var] descrição     -&amp;gt; Info acerca de um parâmetro&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @return        tipo descrição                    -&amp;gt; Info acerca do retorno de uma função, p.e.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @since         Versão                            -&amp;gt; Disponível desde a versão xxxx&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @todo          Descrição do afazer               -&amp;gt; Tarefas para fazer&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @package       Nome do pacote                    -&amp;gt; Nome do pacote onde o ficheiro está inserido&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @subpackage    Nome do sub-pacote                -&amp;gt; Nome do sub-pacote&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @deprecated    Versão                            -&amp;gt; Definição de um método obsoleto a partir da versão xxxx&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * @version       Versão                            -&amp;gt; Utilizado para definir a versão de um ficheiro/método&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;O código acima pode ser visivelmente dividido em três colunas. A primeira são as &lt;strong&gt;tags&lt;/strong&gt;, a segunda a forma de &lt;strong&gt;implementação&lt;/strong&gt; e a terceira, que começa com setas, são indicações a descrever para que servem as tags.&lt;/p&gt;

&lt;p&gt;Estas informações são apenas para vos informar e não devem ser utilizadas em quaisquer contexto dentro de um ficheiro PHP.&lt;/p&gt;

&lt;p&gt;Existem mais tags que podem ser inseridas nos comentários DOCBlocks porém as que se encontram acima são as mais importantes e essenciais. Se quiseres ler mais sobre isto, podes aceder a &lt;a href=&#34;http://manual.phpdoc.org/HTMLSmartyConverter/PHP/phpDocumentor/tutorial_tags.pkg.html&#34;&gt;esta página.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Espero que este artigo  vos tenha sido útil.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Diferenças entre &#39;==&#39; e &#39;===&#39; em PHP</title>
      <link>http://localhost:1313/explanations/diferencas-entre-igual-identico-php</link>
      <pubDate>Wed, 23 Jul 2014 18:31:23 +0000</pubDate>
      
      <guid>http://localhost:1313/explanations/diferencas-entre-igual-identico-php</guid>
      <description>

&lt;p&gt;É habitual utilizarem-se diversos operadores quando o assunto é programação. Existem vários até: aritméticos, comparativos e outros.&lt;/p&gt;

&lt;p&gt;Dentro de cada categoria existem vários sendo que a dos &lt;strong&gt;comparativos&lt;/strong&gt; não é excepção e hoje trago-vos dois operadores comparativos, muito parecidos&amp;hellip; ou talvez não: &lt;code&gt;==&lt;/code&gt; e &lt;code&gt;===&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Há já algum tempo que me questionava em relação ao uso de ambos os operadores pois não tinha a certeza de qual devia utilizar nas diversas situações que me apareciam.&lt;/p&gt;

&lt;p&gt;Depois de uma pequena pesquisa, encontrei esta tabela na resposta a uma pergunta no &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stackoverflow&lt;/a&gt; e tomei a liberdade de a transcrever para aqui:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&amp;mdash;&amp;ndash;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;false&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;null&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;array()&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&amp;ldquo;0&amp;rdquo;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;0x0&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&amp;ldquo;0x0&amp;rdquo;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&amp;ldquo;000&amp;rdquo;&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;&amp;ldquo;0000&amp;rdquo;&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;false&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;null&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;array()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&amp;ldquo;0&amp;rdquo;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;0x0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&amp;ldquo;0x0&amp;rdquo;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&amp;ldquo;000&amp;rdquo;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&amp;ldquo;0000&amp;rdquo;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Como assim? Essa tabela compara diversas possibilidades. &lt;code&gt;!=&lt;/code&gt; quer dizer que é diferente, e os outros dois? Aqui está a diferença entre &lt;code&gt;==&lt;/code&gt; e &lt;code&gt;===&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;==&lt;/code&gt; compara os valores das variáveis ou seja, a &lt;strong&gt;igualdade&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;===&lt;/code&gt; compara os valores das variáveis &lt;strong&gt;e&lt;/strong&gt; o tipo das mesmas ou seja, a &lt;strong&gt;identidade&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estes dois operadores têm dois opostos: o operador &lt;code&gt;!=&lt;/code&gt; e o operador &lt;code&gt;!==&lt;/code&gt; que comparam as mesmas coisas ou seja, o primeiro confirma se as variáveis &lt;strong&gt;não têm valores iguais&lt;/strong&gt; e o segundo verifica se &lt;strong&gt;não têm os valores, nem o tipo iguais&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;exemplo:b3314678417675fcb5ed0f3090572d89&#34;&gt;Exemplo&lt;/h2&gt;

&lt;p&gt;Assim podemos dizer, por exemplo,  que a comparação &lt;code&gt;&amp;quot;1&amp;quot; == 1&lt;/code&gt;  retorna &lt;code&gt;true&lt;/code&gt; mas que &lt;code&gt;&amp;quot;1&amp;quot; === 1&lt;/code&gt;  retorna &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Na primeira comparação só são comparados os valores das variáveis logo 1 é, realmente, igual a 1 daí retornar verdadeiro.&lt;/p&gt;

&lt;p&gt;Na segunda, os tipos também são comparados, enquanto que a primeira é uma string , a segunda é do tipo int  logo é falso apesar do conteúdo ser igual.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Esta explicação é equivalente para outras linguagens de programação como &lt;strong&gt;JavaScript&lt;/strong&gt;, por exemplo.&lt;/p&gt;

&lt;p&gt;Agora que já sei a diferença entre estes dois operadores, é hora de ir mudar alguns &amp;ldquo;==&amp;rdquo; e &amp;ldquo;===&amp;rdquo;.  Podes ler mais sobre operadores comparativos em PHP &lt;a href=&#34;http://au.php.net/manual/en/language.operators.comparison.php&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
