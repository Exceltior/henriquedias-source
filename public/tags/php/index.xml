<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on Henrique Dias</title>
    <link>http://localhost:1313/tags/php/</link>
    <description>Recent content in Php on Henrique Dias</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Jun 2015 22:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Your IMDb Profile, on your WordPress website</title>
      <link>http://localhost:1313/general/your-imdb-profile-on-your-wordpress-website</link>
      <pubDate>Tue, 23 Jun 2015 22:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/general/your-imdb-profile-on-your-wordpress-website</guid>
      <description>&lt;p&gt;A few months ago, &lt;a href=&#34;http://luissoares.com/&#34;&gt;Luís Soares&lt;/a&gt; and I created a &lt;a href=&#34;http://localhost:4000/general/hackerrank-widget-for-wordpress/&#34;&gt;plugin for WordPress&lt;/a&gt; entirely dedicated to &lt;a href=&#34;https://www.hackerrank.com/&#34;&gt;HackerRank&lt;/a&gt;. The main functionality of that plugin is to show a mini version of your HackerRank profile on your website as a widget.&lt;/p&gt;

&lt;p&gt;Now, we created a new one. Not for HackerRank, but for &lt;strong&gt;IMDb&lt;/strong&gt;. Yes, you read correctly! For that amazing service which let us know more about (almost) any movie and serie. We called it IMDb Profile Widget!&lt;/p&gt;

&lt;p&gt;All you have to do is to open our &lt;a href=&#34;https://wordpress.org/plugins/imdb-widget/&#34;&gt;plugin&amp;rsquo;s page&lt;/a&gt;, download it, upload it to your server and activate it (or you may want to install it directly through the interface). Then, go to widgets page and put the &amp;ldquo;IMDb Profile&amp;rdquo; wherever you want. To configure it you just have to put your IMDb id and check what you want to show. Yes, it&amp;rsquo;s that simple!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features include:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;General information (like username, bio, badges&amp;hellip;);&lt;/li&gt;
&lt;li&gt;Ratings (with charts included);&lt;/li&gt;
&lt;li&gt;Watchlist;&lt;/li&gt;
&lt;li&gt;Other lists;&lt;/li&gt;
&lt;li&gt;Reviews;&lt;/li&gt;
&lt;li&gt;Board posts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have liked the development of this plugin but we need your help. Just you can say us if it&amp;rsquo;s good, what&amp;rsquo;s worst, what we have to improve. Your opinion is&amp;hellip; &lt;strong&gt;required&lt;/strong&gt;! Help us to build a better world.&lt;/p&gt;

&lt;p&gt;Luís Soares also &lt;a href=&#34;http://luissoares.com/widget-do-imdb-para-o-wordpress/&#34;&gt;wrote about this new plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hey, developers, the source code is on &lt;a href=&#34;https://github.com/refactors/imdb-widget&#34;&gt;GitHub&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MVC na linguagem PHP - IV</title>
      <link>http://localhost:1313/tutorials/mvc-linguagem-php-iv</link>
      <pubDate>Sun, 21 Dec 2014 10:00:04 +0000</pubDate>
      
      <guid>http://localhost:1313/tutorials/mvc-linguagem-php-iv</guid>
      <description>

&lt;p&gt;A pedido de um leitor, decidimos escrever um artigo em que exemplificamos este maravilhoso (ou não) modelo MVC utilizando a linguagem de programação PHP.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&#34;http://localhost:1313/tutorials/mvc-linguagem-php/&#34;&gt;primeira&lt;/a&gt;, &lt;a href=&#34;http://localhost:1313/tutorials/mvc-linguagem-php-ii/&#34;&gt;segunda&lt;/a&gt; e &lt;a href=&#34;http://localhost:1313/tutorials/mvc-linguagem-php-iv/&#34;&gt;terceiras&lt;/a&gt; partes já foram publicadas. Hoje, trago a quarta e última parte desta mini-série de artigos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/mvcp4.jpg&#34; alt=&#34;Modelo MVC – Uma exemplificação com PHP #4&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O que vamos fazer hoje é, simplesmente, criar uma página dinâmica que liste diversos &lt;em&gt;posts&lt;/em&gt; que estão na base de dados da aplicação.&lt;/p&gt;

&lt;p&gt;Se bem se lembra, a ligação à base de dados é configurada no ficheiro &lt;code&gt;config.php&lt;/code&gt;, por isso assegure-se que a sua conexão está bem configurada.&lt;/p&gt;

&lt;p&gt;Aqui, tenho uma base de dados chamada &lt;em&gt;mvc&lt;/em&gt; com uma tabela chamada &lt;em&gt;posts&lt;/em&gt;, e esta tabela tem três colunas: a &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; e &lt;code&gt;content&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;De momento tenho duas linhas inseridas nessa mesma tabela, ou seja, de momento tenho exatamente o seguinte:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;title&lt;/th&gt;
&lt;th&gt;content&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Lorem Ipsum&lt;/td&gt;
&lt;td&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus id velit non tellus feugiat feugiat vitae quis nibh. Pellentesque maximus lectus ut enim tincidunt, a rutrum dui elementum. Vestibulum elit sapien, malesuada sit amet est lacinia, aliquet laoreet arcu. Duis quis velit hendrerit, pretium nibh ut, faucibus odio. Fusce hendrerit nunc urna, vitae varius augue fringilla in. Nunc a ex eget lectus dictum mollis. Proin quis nisl consectetur metus bibendum ultricies eu non orci. Quisque nec efficitur quam. Suspendisse lorem nulla, sollicitudin ac sagittis id, eleifend eget eros. Interdum et malesuada fames ac ante ipsum primis in faucibus. Cras neque leo, consectetur nec sem quis, imperdiet viverra quam. Pellentesque ultricies felis a molestie egestas. Aliquam malesuada eget justo condimentum venenatis. Duis mattis ut nisi in suscipit. Phasellus scelerisque, arcu ut sollicitudin sagittis, ex ante posuere neque, et dapibus ex lectus quis libero.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Usto Risus&lt;/td&gt;
&lt;td&gt;Usto risus, cursus non iaculis a, semper vitae dolor. Nunc pellentesque tempor pretium. Sed sem risus, accumsan ut urna in, sollicitudin sagittis nisi. Integer ullamcorper orci id nisl iaculis, ac congue purus posuere. Vivamus pharetra nibh in arcu vulputate, in feugiat dolor feugiat. Aliquam erat volutpat. Maecenas sodales magna urna, quis faucibus arcu mattis sit amet. Ali. Fusce hendrerit nunc urna, vitae varius augue fringilla in. Nunc a ex eget lectus dictum mollis. Proin quis nisl consectetur metus bibendum ultricies eu non orci. Quisque nec efficitur quam. Suspendisse lorem nulla, sollicitudin ac sagittis id, eleifend eget eros. Interdum et malesuada fames ac ante ipsum primis in faucibus. Cras neque leo, consectetur nec sem quis, imperdiet viverra quam. Pellentesque ultricies felis a molestie egestas. Aliquam malesuada eget justo condimentum venenatis. Duis mattis ut nisi in suscipit. Phasellus scelerisque, arcu ut sollicitudin sagittis, ex ante posuere neque, et dapibus ex lectus quis libero.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;controlador:30a6231206f46a4d16a2087c59187fd6&#34;&gt;Controlador&lt;/h2&gt;

&lt;p&gt;Como sempre, iremos começar com um simples controlador. De momento, o controlador deverá ser simples e ter apenas o seguinte:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Posts&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Controller&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;posts&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;cm&#34;&gt;/* REQUERER POSTS */&lt;/span&gt;

        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setTitle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Posts&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;posts/index&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De momento, apenas declaramos o construtor e também a função index  que será aquela que vai  ser acedida ao acedermos a &lt;code&gt;URL/posts&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;modelo:30a6231206f46a4d16a2087c59187fd6&#34;&gt;Modelo&lt;/h2&gt;

&lt;p&gt;Vamos então virar a nossa cara para os modelos. O modelo correspondente a este controlador deverá estar localizado em &lt;code&gt;app_core/models/posts.php&lt;/code&gt; e deverá conter um código semelhante ao seguinte:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Posts&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Model&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getPosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;SELECT * FROM posts&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Onde utilizamos o construtor para criar uma ligação à base de dados e criamos a função &lt;code&gt;getPosts&lt;/code&gt; que irá buscar todos as as colunas da tabela &lt;em&gt;posts&lt;/em&gt; da base de dados a que está ligada a nossa aplicação.&lt;/p&gt;

&lt;p&gt;Como pode ver, este é um modelo bastante simples cuja única função é buscar os ficheiros à base de dados. De momento não há mais nenhuma alteração.&lt;/p&gt;

&lt;h2 id=&#34;voltando-ao-controlador:30a6231206f46a4d16a2087c59187fd6&#34;&gt;Voltando ao controlador&amp;hellip;&lt;/h2&gt;

&lt;p&gt;Agora devemos voltar ao controlador e substituir o comentário que lá deixámos pelas seguintes duas linhas:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$data = $this-&amp;gt;model-&amp;gt;getPosts();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$this-&amp;gt;view-&amp;gt;setData($data);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A função destas duas linhas é bastante simples: primeiro, declaramos uma variável que será igual ao retorno da função que criámos anteriormente para selecionar os artigos.&lt;/p&gt;

&lt;p&gt;De seguida, &amp;ldquo;injetamos&amp;rdquo; o conteúdo desta variável na &lt;em&gt;view&lt;/em&gt; deste controlador utilizando a função &lt;code&gt;setData&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;que-bela-vista:30a6231206f46a4d16a2087c59187fd6&#34;&gt;Que bela vista!&lt;/h2&gt;

&lt;p&gt;Agora só falta a parte que irá mostrar os itens na página: a &lt;em&gt;view&lt;/em&gt;. Esta &lt;em&gt;view&lt;/em&gt; deverá ser declarada no diretório &lt;code&gt;app_core/views/posts/index.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Relembro que a localização do ficheiro é definida quando utilizamos a função render . Então, o conteúdo que coloquei nesta página é o seguinte:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;h1&amp;gt;Posts&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_data&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;endforeach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como pode ver, aqui percorremos todos os itens do array &lt;code&gt;$_data&lt;/code&gt; que faz parte da vista e, de seguida, imprimimos o título e o conteúdo de cada &lt;em&gt;post&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;ou-seja:30a6231206f46a4d16a2087c59187fd6&#34;&gt;Ou seja,&lt;/h2&gt;

&lt;p&gt;Ou seja, é muito simples. Muitas coisas podem ser agora feitas neste modelo, pois a parte mais difícil já foi feita: o &lt;em&gt;core&lt;/em&gt;, o &lt;em&gt;kernel&lt;/em&gt;, o núcleo da aplicação.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tem alguma sugestão, ideia ou modificação? Sinta-se livre para contribuir para esta simples, pequena e &lt;em&gt;homemade framework&lt;/em&gt; no &lt;a href=&#34;https://github.com/hacdias/InMVC&#34;&gt;GitHub&lt;/a&gt; :)&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MVC na linguagem PHP - III</title>
      <link>http://localhost:1313/tutorials/mvc-linguagem-php-iii</link>
      <pubDate>Sat, 20 Dec 2014 09:00:23 +0000</pubDate>
      
      <guid>http://localhost:1313/tutorials/mvc-linguagem-php-iii</guid>
      <description>

&lt;p&gt;A pedido de um leitor, decidimos escrever um artigo em que exemplificamos este maravilhoso (ou não) modelo MVC utilizando a linguagem de programação PHP.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&#34;http://localhost:1313/tutorials/mvc-linguagem-php/&#34;&gt;primeira&lt;/a&gt; e &lt;a href=&#34;http://localhost:1313/tutorials/mvc-linguagem-php-ii/&#34;&gt;segunda&lt;/a&gt; partes já foram publicadas e hoje é a vez da terceira onde tudo começa a tornar-se mais facilmente compreendido.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/mvcphp.jpg&#34; alt=&#34;Modelo MVC – Uma exemplificação com PHP #3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Em primeiro lugar, quero referir algumas modificações que efetuei em alguns dos ficheiros que já trabalhámos.&lt;/p&gt;

&lt;p&gt;Adicionei a constante &lt;code&gt;SITE_TITLE&lt;/code&gt; ao ficheiro &lt;code&gt;config.php&lt;/code&gt;, ficando a primeira secção deste ficheiro da seguinte forma:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//...&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//1. Base Constants&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ROOT&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dirname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;__FILE__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;URL&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost/mvc/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;SITE_TITLE&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Simple MVC Structure Model&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Na classe &lt;code&gt;View&lt;/code&gt; foi adicionada uma função que permitirá ao utilizador definir o título (aquele que aparece na parte superior do &lt;em&gt;browser&lt;/em&gt;).&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;public function setTitle($title)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $this-&amp;gt;_pageInfo[&amp;#39;title&amp;#39;] = $title . &amp;#39; | &amp;#39; . SITE_TITLE;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id=&#34;public-html:ae98e7c4c7a05fc53108b63636849ebe&#34;&gt;&lt;code&gt;public_html&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Hoje vamos continuar a nossa jornada começando na pasta pública, ou seja, na pasta &lt;code&gt;public_html&lt;/code&gt;. Vamos começar com o nosso maravilhoso &lt;code&gt;.htaccess&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nb&#34;&gt;ErrorDocument&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;404&lt;/span&gt; &lt;span class=&#34;sx&#34;&gt;/404&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;ErrorDocument&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;500&lt;/span&gt; &lt;span class=&#34;sx&#34;&gt;/500&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;&amp;lt;IfModule&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;mod_rewrite.c&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;nb&#34;&gt;RewriteEngine&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;On&lt;/span&gt;

    &lt;span class=&#34;nb&#34;&gt;RewriteCond&lt;/span&gt; %{REQUEST_FILENAME} !-d
    &lt;span class=&#34;nb&#34;&gt;RewriteCond&lt;/span&gt; %{REQUEST_FILENAME} !-f
    &lt;span class=&#34;nb&#34;&gt;RewriteCond&lt;/span&gt; %{REQUEST_FILENAME} !-l

    &lt;span class=&#34;nb&#34;&gt;RewriteRule&lt;/span&gt; ^(.+)$ index.php?url=$1 [QSA,L]

&lt;span class=&#34;nt&#34;&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como pode ver, todos os pedidos serão direcionados para o ficheiro &lt;code&gt;index.php&lt;/code&gt; com o URL completo na forma de parâmetro GET.&lt;/p&gt;

&lt;p&gt;Falando em &lt;code&gt;index.php&lt;/code&gt;, e que tal lhe darmos uma espreitadela? Este vai ser o ficheiro que vai iniciar toda a sequência de acontecimentos. Ora veja:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; * Main file.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; * @package MVC PHP Bootstrap&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;../app_core/config.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;autoLoad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$className&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DIR_LIBS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$className&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;spl_autoload_register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;autoLoad&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$bootstrap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Bootstrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$bootstrap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Neste ficheiro, como pode ver, o ficheiro das configurações é chamado e, de seguida, é criado uma função de auto carregamento.&lt;/p&gt;

&lt;p&gt;O que faz esta função? Simplesmente tenta carregar uma classe indefinida. Como pode ver, eu não importo a classe &lt;code&gt;Bootstrap&lt;/code&gt;, mas logo de seguida uso-a.&lt;/p&gt;

&lt;p&gt;Consigo utilizá-la porque a a função de &lt;em&gt;auto load&lt;/em&gt; chama esta classe automaticamente. Mas atenção! Este código apenas nos permite carregar automaticamente classes contidas na pasta &lt;code&gt;libs&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Se neste momento experimentar correr o código nesta pasta irá receber diversos erros porque ainda não foram criados nenhuns controladores. Nem mesmo o dos erros!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;header-and-footer:ae98e7c4c7a05fc53108b63636849ebe&#34;&gt;&lt;em&gt;Header and Footer&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Antes de continuarmos para a criação dos controladores, devemos criar os ficheiros do cabeçalho e do rodapé que são chamados quando executamos a função &lt;em&gt;render&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Estes dois ficheiros deverão estar localizados na diretoria &lt;code&gt;app_core/views/*.php&lt;/code&gt;, onde &lt;code&gt;*&lt;/code&gt; corresponde a &lt;em&gt;header&lt;/em&gt; e a &lt;em&gt;footer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A minha proposta para o ficheiro do cabeçalho é a seguinte:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;en-EN&amp;#39;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php echo (isset($this-&amp;gt;_pageInfo[&amp;#39;title&amp;#39;])) ? $this-&amp;gt;_pageInfo[&amp;#39;title&amp;#39;] : SITE_TITLE; ?&amp;gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;nt&#34;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;viewport&amp;#39;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;width=device-width, initial-scale=1&amp;#39;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;nt&#34;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;stylesheet&amp;#39;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;lt;?php echo URL; ?&amp;gt;css/template.css&amp;#39;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;text/css&amp;#39;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;media=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;stylesheet&amp;#39;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;lt;?php echo URL; ?&amp;gt;css/normalize.css&amp;#39;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;text/css&amp;#39;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;media=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;header&amp;#39;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;MVCPHPB&lt;span class=&#34;nt&#34;&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
    | &lt;span class=&#34;nt&#34;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;lt;?php echo URL; ?&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;Home&lt;span class=&#34;nt&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    | &lt;span class=&#34;nt&#34;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;lt;?php echo URL; ?&amp;gt;page&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;Page&lt;span class=&#34;nt&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    | &lt;span class=&#34;nt&#34;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;lt;?php echo URL; ?&amp;gt;posts&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;Posts&lt;span class=&#34;nt&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;wrap&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Onde já temos o título da página que será igual ao título que é definido utilizando a função que referi no início do artigo, ou apenas o nome do site.&lt;/p&gt;

&lt;p&gt;Deixei também uma pequena introdução à estrutura HTML do site e uma pista àquilo que iremos criar: iremos criar uma página estática (&lt;em&gt;Page&lt;/em&gt;) e uma página dinâmica com alguns itens de uma base de dados (&lt;em&gt;Posts&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Estou também a utilizar o &lt;code&gt;normalize.css&lt;/code&gt; e uma folha de estilos própria com alguns ajustes de forma a distinguir melhor cada uma das partes do site. Aqui está o &lt;code&gt;template.css&lt;/code&gt; (deve ser colocado na pasta &lt;code&gt;css&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nf&#34;&gt;#header&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;#wrap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;#footer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;20px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;#header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rgba&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;#footer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rgba&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;#fff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos agora ver o rodapé. O rodapé está localizado no ficheiro &lt;code&gt;app_core/views/footer.php&lt;/code&gt; e o conteúdo deve ser algo semelhante ao seguinte:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;&amp;lt;footer&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;footer&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;strong&amp;gt;&amp;lt;strong&amp;gt;&lt;/span&gt;MVCPHPB&lt;span class=&#34;nt&#34;&gt;&amp;lt;/strong&amp;gt;&amp;lt;/strong&amp;gt;&lt;/span&gt; Footer
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;controladores:ae98e7c4c7a05fc53108b63636849ebe&#34;&gt;Controladores&lt;/h2&gt;

&lt;p&gt;Depois de termos &amp;ldquo;montado&amp;rdquo; a estrutura, devemos passar à criação das páginas. Em primeiro lugar, vamos criar o controlador do erro.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Controller&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$error&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;404&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;404&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Error 404&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;msg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Not found. There is nothing here.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;500&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Error 500&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;msg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Internal Server Error. Probably we did something wrong.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setTitle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;error/index&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Os controladores devem pertencer à &lt;em&gt;namespace&lt;/em&gt; Controller e devem ter, obrigatoriamente, o seu construtor presente no formato mostrado acima.&lt;/p&gt;

&lt;p&gt;Este é um controlador que só terá o método _index _relacionado com as páginas pois não irá ser utilizado mais nenhum. Acima pode visualizar que este método irá receber um argumento que, por padrão, é &amp;lsquo;404&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;De seguida, algumas informações são atribuídas dependendo do erro em questão. Depois o título da página é definido e, mais tarde, os dados são enviados para a &lt;em&gt;view&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Falando em &lt;em&gt;view&lt;/em&gt;, esta é renderizada logo de seguida. A _view _que colocámos é &lt;code&gt;error/index&lt;/code&gt;, então o ficheiro PHP deverá encontrar-se em &lt;code&gt;app_core/views/error/index.php&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Se experimentar correr o código neste momento, deverá receber um erro por não encontrar a _View _da página de erro.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vamos então visualizar a &lt;em&gt;view&lt;/em&gt; que corresponde à página de erro:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;    &amp;lt;h1&amp;gt; &lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    &amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;msg&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É simples. Serve apenas para mostrar que ocorreu um erro. Mas não podemos continuar assim pois ao abrirmos a página inicial estamos apenas a ver um erro.&lt;/p&gt;

&lt;p&gt;Vamos então criar o controlador da página inicial, que deve conter o seguinte código:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Index&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Controller&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setTitle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Home&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;index/index&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E o ficheiro da sua _view _deverá ter qualquer coisa que deseje. Eu, por exemplo, coloquei:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;MVC PHP Bootstrap (MVCPHPB)&lt;span class=&#34;nt&#34;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is the main page of this website that is a simple mvc structure model example.&lt;span class=&#34;nt&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Esta é a página principal deste site que é um exemplo de modelo de estrutura MVC simples.&lt;span class=&#34;nt&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Coloque o que queira. De momento, se aceder à página inicial deverá visualizar a página inicial propriamente dita e se tentar, eventualmente, abrir qualquer outra possível página, irá ver a página de erro 404.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No próximo tutorial iremos ver a criação de uma página dinâmica com um modelo&lt;/strong&gt;. Pode, entretanto, experimentar criar mais páginas ou até mesmo criar mais métodos para sub-páginas.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MVC na linguagem PHP - II</title>
      <link>http://localhost:1313/tutorials/mvc-linguagem-php-ii</link>
      <pubDate>Fri, 19 Dec 2014 12:26:59 +0000</pubDate>
      
      <guid>http://localhost:1313/tutorials/mvc-linguagem-php-ii</guid>
      <description>

&lt;p&gt;A pedido de um leitor, decidimos escrever um artigo em que exemplificamos este maravilhoso (ou não) modelo MVC utilizando a linguagem de programação PHP.&lt;/p&gt;

&lt;p&gt;Depois de publicarmos a &lt;a href=&#34;http://localhost:1313/mvc-linguagem-php/&#34;&gt;primeira parte&lt;/a&gt;, onde explicámos a estrutura da pequena &lt;em&gt;framework&lt;/em&gt; que iremos criar, aqui está a segunda parte.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/mvc02.jpg&#34; alt=&#34;Modelo MVC - Uma exemplificação com PHP #2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hoje iremos trabalhar no coração da aplicação, ou seja, na diretoria &lt;code&gt;app_core/libs&lt;/code&gt;. Nesta pasta mãe, irão ser colocados todos os ficheiros PHP que serão as classes mãe de todos os outros ficheiros.&lt;/p&gt;

&lt;h2 id=&#34;bootstrap-php:8c5520c3a68364cd39d5b7074fc8e9f3&#34;&gt;&lt;strong&gt;Bootstrap.php&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Vamos começar por criar um ficheiro denominado Bootstrap.php onde iremos colocar todo o seguinte código:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; * Class Bootstrap&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; * @package MVC PHP Bootstrap&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Bootstrap&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_controller&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_errorFile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;error.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * Starts the Bootstrap&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     *&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @return boolean&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_getUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * This function get the content of &amp;#39;url&amp;#39; variable&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * of HTTP GET method. See the .htaccess for more&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * information.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_getUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rtrim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;filter_var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FILTER_SANITIZE_URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;explode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * This function initializes the controller that&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * matches with the current url.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     *&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @return bool&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DIR_CONTROLLERS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;file_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

            &lt;span class=&#34;nv&#34;&gt;$controller&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Controller&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

            &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_controller&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;

            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * This function calls the method depending on the&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * url fetched above.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;method_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;//Controller-&amp;gt;Method(Param1, Param2, Param3)&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_controller&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]}(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;//Controller-&amp;gt;Method(Param1, Param2)&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_controller&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]}(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;//Controller-&amp;gt;Method(Param1, Param2)&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_controller&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]}(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;//Controller-&amp;gt;Method(Param1, Param2)&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_controller&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]}();&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

            &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_controller&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * Display an error page if there&amp;#39;s no controller&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * that corresponds with the current url.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DIR_CONTROLLERS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_errorFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_controller&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ControllerError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_controller&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O código acima é aquele que irá inicializar todo a aplicação. Em primeiro lugar, gostava de dizer que a estrutura do URL da aplicação será a seguinte:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;    http://site/controlador/método/arg1/arg2/&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;arg...&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos então ver, por partes, o que faz cada uma das funções declaradas acima.&lt;/p&gt;

&lt;h3 id=&#34;init:8c5520c3a68364cd39d5b7074fc8e9f3&#34;&gt;&lt;code&gt;init&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;A função &lt;code&gt;init&lt;/code&gt; é a função onde tudo começa. Em primeiro lugar, esta função chama a função &lt;code&gt;_getUrl&lt;/code&gt; que recebe o URL atual (será analisada mais à frente).&lt;/p&gt;

&lt;p&gt;De seguida, esta função define a página como index caso nenhuma página esteja definida no URL. Então a função chama duas outras que iremos ver de seguida.&lt;/p&gt;

&lt;h3 id=&#34;geturl:8c5520c3a68364cd39d5b7074fc8e9f3&#34;&gt;&lt;code&gt;_getUrl&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Esta função recebe a variável url que foi passada através do método GET (em breve veremos as modificações que têm que ser efetuadas no &lt;code&gt;.htaccess&lt;/code&gt; para que seja passada esta variável).&lt;/p&gt;

&lt;p&gt;Aqui é utilizado o &lt;a href=&#34;http://localhost:1313/explanations/operador-ternario/&#34;&gt;operador ternário&lt;/a&gt; de forma a que a variável&lt;code&gt;$url&lt;/code&gt; seja igual a null  caso não haja nenhum conteúdo na variável url que foi passada através do método GET.&lt;/p&gt;

&lt;p&gt;Depois é removida a última barra (/) da variável com a função &lt;code&gt;rtrim&lt;/code&gt;. De seguida é aplicado um filtro à array  de forma a remover todos os caracteres não permitidos aqui.&lt;/p&gt;

&lt;p&gt;Finalmente, a variável do url da classe (&lt;code&gt;$_url&lt;/code&gt;) é igualada à &amp;ldquo;explosão&amp;rdquo; da variável &lt;code&gt;$url&lt;/code&gt; que se irá tornar num array .&lt;/p&gt;

&lt;h3 id=&#34;controller:8c5520c3a68364cd39d5b7074fc8e9f3&#34;&gt;&lt;code&gt;_controller&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Esta função, em primeiro lugar, define o caminho do ficheiro do controlador correspondente ao URL atual. O caminho será igual à constante &lt;code&gt;DIR_CONTROLLERS&lt;/code&gt; + a primeira parte do url + a extensão do ficheiro que é &lt;code&gt;.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;De seguida, é feita a verificação se o controlador em questão existe. Se existir, o controlador é inicializado, caso contrário, o fluxo da aplicação é direcionado para a função de erro (&lt;code&gt;_error&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&#34;method:8c5520c3a68364cd39d5b7074fc8e9f3&#34;&gt;&lt;code&gt;_method&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Esta função é como um GPS: ela é que envia o fluxo para o sítio correto. Isto vai ser feito dependendo do que foi enviado no URL.&lt;/p&gt;

&lt;p&gt;Esta função irá executar o método em questão que, caso não seja especificado nenhum, é o método index do controlador em questão.&lt;/p&gt;

&lt;h3 id=&#34;error:8c5520c3a68364cd39d5b7074fc8e9f3&#34;&gt;&lt;code&gt;_error&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Finalmente, temos a função de erro que irá inicializar o controlador dos erros. O ficheiro que corresponde a este controlador é definido na variável &lt;code&gt;$_errorFile&lt;/code&gt;, que eu coloquei &lt;code&gt;error.php&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;controller-php:8c5520c3a68364cd39d5b7074fc8e9f3&#34;&gt;&lt;code&gt;Controller.php&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;De momento, o que foi feito até agora pode aparentar não ter muito sentido, mas com o encaixar das peças tudo irá ser mais claro. Vejamos agora a classe mãe dos Controladores.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; * Class Controller&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; * @package MVC PHP Bootstrap&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Controller&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * The constructor of this class automatically initializes&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * the View and sets the corresponding model path. If the&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * model file exists, it calls it.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     *&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @param $name&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;View&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

        &lt;span class=&#34;nv&#34;&gt;$path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ROOT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;models/&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;file_exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

            &lt;span class=&#34;nv&#34;&gt;$modelName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Model&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$modelName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta classe é claramente menos complexa que a anterior e conta apenas com o seu construtor que recebe o nome do controlador e inicializa, automaticamente, a &lt;em&gt;View&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;De seguida, o construtor constrói o caminho até ao modelo do controlador em questão, que caso o controlador se chame &amp;ldquo;about&amp;rdquo; , o caminho para o modelo seria &lt;code&gt;ROOT . &#39;models/about.php&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Depois é feita a verificação se existe o ficheiro do modelo e, caso este exista, é inicializado o modelo do controlador.&lt;/p&gt;

&lt;p&gt;Mas, porque é que esta verificação é feita? Porque nem todas as páginas utilizarão a base de dados. Páginas estáticas como, por exemplo, a página sobre, não necessitam, geralmente, de manipulação de dados.&lt;/p&gt;

&lt;h2 id=&#34;database-php:8c5520c3a68364cd39d5b7074fc8e9f3&#34;&gt;&lt;code&gt;Database.php&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;A classe Database vai estar intimamente ligada com a classe PDO e será com ela que inicializaremos a ligação à base de dados e não com a PDO, pois a Database  é baseada na PDO. Ora veja:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; * Class Database&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; * @package MVC PHP Bootstrap&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Database&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PDO&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DB_TYPE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$DB_HOST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$DB_NAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$DB_USER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$DB_PASS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DB_TYPE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;:host=&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$DB_HOST&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;;dbname=&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$DB_NAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$DB_USER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$DB_PASS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;SET NAMES &amp;#39;utf8&amp;#39;;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * Function used to select something of the database.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     *&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @param string $sql An SQL string&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @param array $array Parameters to bind&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @param const|int $fetchMode A PDO Fetch mode&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @return mixed&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$sql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$array&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$fetchMode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PDO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;FETCH_ASSOC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$sth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;prepare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$sql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$array&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$sth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;bindValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;nv&#34;&gt;$sth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$sth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;fetchAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fetchMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * Function used to insert things in the database.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     *&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @param string $table A name of table to insert into&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @param string $data An associative array&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;ksort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;nv&#34;&gt;$fieldNames&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;implode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;`, `&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;array_keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$fieldValues&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;implode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;, :&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;array_keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

        &lt;span class=&#34;nv&#34;&gt;$sth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;prepare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;INSERT INTO &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$table&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; (`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$fieldNames&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;`) VALUES (&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$fieldValues&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;)&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$sth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;bindValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;nv&#34;&gt;$sth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * Function used to update things on the database.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     *&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @param string $table A name of table to insert into&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @param string $data An associative array&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @param string $where the WHERE query part&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;ksort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$fieldDetails&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$fieldDetails&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;`=:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;nv&#34;&gt;$fieldDetails&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rtrim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fieldDetails&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;nv&#34;&gt;$sth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;prepare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;UPDATE &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$table&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; SET &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$fieldDetails&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; WHERE &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$where&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;$sth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;bindValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;nv&#34;&gt;$sth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * Function used to delete things from the database.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     *&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @param string $table&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @param string $where&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @param integer $limit&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * @return integer Affected Rows&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$limit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;DELETE FROM &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$table&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; WHERE &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$where&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; LIMIT &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$limit&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não há muito a falar sobre esta classe visto que ela contém apenas algumas funções para agilizar diversas operações como inserções na base de dados, seleções, atualizações e eliminações.&lt;/p&gt;

&lt;p&gt;Acrescento que o construtor deve receber todos aqueles itens que escrevemos nas constantes da configuração: todos os dados relativos à conexão à Base de Dados.&lt;/p&gt;

&lt;h2 id=&#34;model-php:8c5520c3a68364cd39d5b7074fc8e9f3&#34;&gt;&lt;code&gt;Model.php&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Vejamos então a classe superior de todos os modelos que irão constituir a nossa aplicação:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; * Class Model&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; * @package MVC PHP Bootstrap&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Model&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * The constructor of this class automatically initializes&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     * the Database.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;     */&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DB_TYPE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DB_HOST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DB_NAME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DB_USER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DB_PASS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como pode ver, a classe é pequena e o seu construtor apenas inicializa uma instância da conexão à Base de Dados que será utilizada em todos os modelos.&lt;/p&gt;

&lt;h2 id=&#34;view-php:8c5520c3a68364cd39d5b7074fc8e9f3&#34;&gt;&lt;code&gt;View.php&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;O modelo da &lt;em&gt;View&lt;/em&gt; que já foi muito falado acima também é muito pequeno.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; * Class View&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; * @package MVC PHP Bootstrap&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;View&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;//Views Contruct&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DIR_VIEWS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;header.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DIR_VIEWS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DIR_VIEWS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;footer.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Neste é inicializada uma variável chamada &lt;code&gt;$_data &lt;/code&gt; que irá conter todo o conteúdo que deverá ser enviado para o HTML de forma a ser imprimido.&lt;/p&gt;

&lt;p&gt;Temos também a função render  que é aquela que vai incluir (ou requerer) todos os ficheiros para serem apresentados. Dividi os ficheiros em três partes: o cabeçalho (&lt;em&gt;header&lt;/em&gt;), o principal e o rodapé (&lt;em&gt;footer&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Temos, por fim, a função setData que será utilizada para definir a variável da vista. Utilizei uma função para não haver manipulação direta das variáveis da classe.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Provavelmente reparou que coloquei vários comentário em Inglês. No final desta saga de artigos vou colocar esta &lt;em&gt;framework&lt;/em&gt; simples no GitHub de forma a que todos os que queiram possam contribuir ou até mesmo utilizar. :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Até ao próximo artigo. O principal já está feito. Faltam os dois ficheiros que iniciarão tudo (e mais algumas coisinhas).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MVC na linguagem PHP</title>
      <link>http://localhost:1313/tutorials/mvc-linguagem-php</link>
      <pubDate>Thu, 18 Dec 2014 22:55:34 +0000</pubDate>
      
      <guid>http://localhost:1313/tutorials/mvc-linguagem-php</guid>
      <description>

&lt;p&gt;No último artigo publicado, foi falado acerca do &lt;a href=&#34;http://localhost:1313/explanations/mvc-uma-breve-explicacao/&#34;&gt;&lt;strong&gt;Modelo MVC&lt;/strong&gt;&lt;/a&gt; e sobre aquilo em que este consiste. O Modelo &lt;em&gt;Model-View-Controller&lt;/em&gt; é amplamente utilizado nos dias de hoje.&lt;/p&gt;

&lt;p&gt;A pedido de um leitor, decidimos escrever um artigo em que exemplificamos este maravilhoso (ou não) modelo MVC utilizando a linguagem de programação PHP.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/mvcuecphppI.jpg&#34; alt=&#34;Modelo MVC - Uma exemplificação com PHP #1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Gostaria de dizer que esta exemplificação terá como base uma &amp;ldquo;framework base&amp;rdquo; MVC construída por mim através de vários tutoriais e ideias que encontrei &lt;em&gt;online&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para a aplicação começar a ser construída, é necessário efetuar a estruturação da mesma. Esta estruturação passa pela disposição dos ficheiros pelas pastas. Irá ser utilizada a seguinte estrutura:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; app_core &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Application Core&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; controllers
     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; libs
     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; models
     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; views
     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; config.php

&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; public_html &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Public HTML&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; css
     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; imgs
     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; js
     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; .htaccess
     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; index.php
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Visualizando a estruturação anterior, é possível verificar que existem duas pastas principais: a pasta &lt;code&gt;app_core&lt;/code&gt; e a pasta &lt;code&gt;public_html&lt;/code&gt;. Cada uma das duas pastas tem a sua função específica. Vejamos então qual a finalidade de cada uma das pastas.&lt;/p&gt;

&lt;h2 id=&#34;application-core:2145cfb95ae0f5633dadec63c3e54ade&#34;&gt;&lt;em&gt;Application Core&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;O núcleo (ou motor) da aplicação está contido na pasta &lt;code&gt;app_core&lt;/code&gt; estando no mesmo nível que a pasta que irá estar pública através do &lt;em&gt;browser&lt;/em&gt;, logo os visitantes não terão acesso a nenhum conteúdo desta pasta. Dentro desta pasta podemos verificar a existência de quatro outras e também de um ficheiro.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;controllers&lt;/code&gt; → pasta para colocar os controladores da aplicação que são, de forma generalizada, aqueles ficheiros que comandam a aplicação: o seu cérebro;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;libs&lt;/code&gt; → nesta pasta estão contidas as classes base para todos os outros ficheiros da aplicação como os modelos, controladores, vistas, base de dados, etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;models&lt;/code&gt; → aqui são colocados os modelos da aplicação, ou seja, aqueles ficheiros que estão encarregados da manipulação de dados;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;views&lt;/code&gt; → esta pasta irá conter todos os ficheiros que têm como base HTML. Mais nenhuma pasta da aplicação deverá conter ficheiros com HTML;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;config.php&lt;/code&gt; → o ficheiro de configuração principal. Aqui são definidas as diversas constantes que irão ser necessárias na execução da aplicação.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;public-html:2145cfb95ae0f5633dadec63c3e54ade&#34;&gt;&lt;em&gt;Public HTML&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;A pasta &lt;code&gt;public_html&lt;/code&gt; será aquela que para a qual o servidor web, como por exemplo o apache, estará a apontar. Esta irá conter todos os ficheiros que estarão disponíveis ao utilizador.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;css&lt;/code&gt; → todos os ficheiros de estilo serão incluídos nesta pasta;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imgs&lt;/code&gt; → qualquer imagem que seja utilizada na aplicação poderá ser colocada aqui;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;js&lt;/code&gt; → todos os scripts escritos na linguagem &lt;em&gt;javascript&lt;/em&gt; deverão aqui ser colocados;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.htacces&lt;/code&gt;s → o ficheiro que dispensa apresentações;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.php&lt;/code&gt; → o ficheiro onde tudo começa.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;config-php:2145cfb95ae0f5633dadec63c3e54ade&#34;&gt;config.php&lt;/h2&gt;

&lt;p&gt;Iremos começar pelo ficheiro mais simples: o ficheiro &lt;code&gt;config.php&lt;/code&gt; que está contido base do núcleo da aplicação (&lt;code&gt;app_core/config.php&lt;/code&gt;). Este ficheiro, como já referido, irá conter as constantes principais. Ora veja:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;* Ficheiro de Configuração&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;* Este ficheiro contém a configuração base deste website/aplicação:&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*  1. Constantes Base&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*  2. Constantes de Diretórios&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*  3. Configuração da Base de Dados&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*  4. Definições de erros&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;* Coloque sempre uma barra (/) depois de todos os caminhos.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//1. Constantes Base&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ROOT&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dirname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;__FILE__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;URL&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost/mvc/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//2. Constantes de Diretórios&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;DIR_LIBS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ROOT&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;libs/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;DIR_MODELS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ROOT&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;models/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;DIR_VIEWS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ROOT&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;views/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;DIR_CONTROLLERS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ROOT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;controllers/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;DIR_PUBLIC&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;../public_html/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//3. Configuração da Base de Dados&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;DB_TYPE&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;DB_HOST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;DB_NAME&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dbname&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;DB_USER&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dbuser&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;DB_PASS&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dbpass&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;* 4. Definições de Erros&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;* Defina error_reporting:&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*  para -1 de forma a mostrar todos os erros que ocorrem;&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*  para  0 de forma a ocultar todos os erros gerados.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;error_reporting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;ini_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;display_errors&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;-1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Crie um ficheiro com o código acima e guarde-o na pasta mencionada. Não se esqueça de alterar a constante URL, de forma a corresponder com o URL que vai utilizar para criar esta pequena aplicação. Altere também os dados da Configuração da Base de Dados.&lt;/p&gt;

&lt;h3 id=&#34;dica:2145cfb95ae0f5633dadec63c3e54ade&#34;&gt;Dica:&lt;/h3&gt;

&lt;p&gt;Como pode ter reparado acima, eu estou a utilizar o link &lt;code&gt;localhost/mvc&lt;/code&gt;  que redirecionará para a pasta pública da aplicação, sendo que a base dos documentos do meu servidor é &lt;code&gt;C:\Web\Server\Apache24\htdocs&lt;/code&gt;  e a aplicação está localizada em &lt;code&gt;D:\Development\mvc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Como fiz isto? Criei um &lt;a href=&#34;http://en.wikipedia.org/wiki/Symbolic_link&#34;&gt;&lt;em&gt;link simbólico&lt;/em&gt;&lt;/a&gt; de forma a que C:WebServerApache24htdocsmvc  corresponda a D:Developmentmvcpublic_html . Para criar um link simbólico no Windows basta correr o seguinte comando na linha de comandos em modo de administrador:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;MKLINK /D &amp;lt;novo-link&amp;gt; &amp;lt;&lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt;-dos-ficheiros&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Onde &lt;code&gt;&amp;lt;novo-link&lt;/code&gt;&amp;gt; corresponde ao local a que irá corresponder o &lt;code&gt;&amp;lt;local-dos-ficheiros&amp;gt;&lt;/code&gt;. No meu caso, tive que executar o seguinte comando:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;MKLINK /D C:&lt;span class=&#34;se&#34;&gt;\W&lt;/span&gt;ebServer&lt;span class=&#34;se&#34;&gt;\A&lt;/span&gt;pache24&lt;span class=&#34;se&#34;&gt;\h&lt;/span&gt;tdocs&lt;span class=&#34;se&#34;&gt;\m&lt;/span&gt;vc D:&lt;span class=&#34;se&#34;&gt;\D&lt;/span&gt;evelopment&lt;span class=&#34;se&#34;&gt;\m&lt;/span&gt;vc&lt;span class=&#34;se&#34;&gt;\p&lt;/span&gt;ublic_html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Isto pode ser, obviamente, feito também em &lt;em&gt;linux&lt;/em&gt; e &lt;em&gt;OS X&lt;/em&gt; porém não sei como, mas caso tenha uma distribuição Linux ou OS X, recomendo a leitura desta &lt;a href=&#34;http://apple.stackexchange.com/questions/115646/how-can-i-create-a-symbolic-link-in-terminal&#34;&gt;página&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;saindo-da-dica:2145cfb95ae0f5633dadec63c3e54ade&#34;&gt;Saindo da dica&amp;hellip;&lt;/h2&gt;

&lt;p&gt;Como pode ver pela estrutura da aplicação, ainda há muito a fazer. Em breve lançarei a segunda parte desta mini-série de artigos. Esperemos que tenham gostado deste e que gostem dos próximos artigos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modelo MVC - Uma breve explicação</title>
      <link>http://localhost:1313/explanations/mvc-uma-breve-explicacao</link>
      <pubDate>Sat, 22 Nov 2014 16:02:56 +0000</pubDate>
      
      <guid>http://localhost:1313/explanations/mvc-uma-breve-explicacao</guid>
      <description>

&lt;p&gt;A programação é algo fantástico que nos permite fazer qualquer coisa das mais diversas formas. Podemos criar, inovar, melhorar e até nos divertirmos. Existem várias formas de programar, várias maneiras.&lt;/p&gt;

&lt;p&gt;Cada um, ao longo do tempo, vai adotando diversas formas de programar, diversas idiossincrasias que o vai distinguir ao longo do tempo. Mas o que vos trazemos hoje não é nenhuma idiossincrasia, é o modelo &lt;strong&gt;MVC&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MVC&lt;/strong&gt; é um modelo de arquitetura de software que é muito utilizado atualmente mas, por vezes, pode tornar-se confuso inicialmente (como me aconteceu) mas, depois de alguma pesquisa, cheguei à conclusão de que é muito simples &lt;strong&gt;compreender&lt;/strong&gt; este modelo.&lt;/p&gt;

&lt;h2 id=&#34;o-que-quer-dizer-mvc:451bfcfedd1834e71bbe73844715757f&#34;&gt;O que quer dizer MVC?&lt;/h2&gt;

&lt;p&gt;Em primeiro lugar, é importante saber o que quer dizer MVC e o que é e para que serve cada uma das suas componentes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MVC&lt;/strong&gt; quer dizer, em inglês, &lt;em&gt;model-view-controller&lt;/em&gt; e, em português, podemos traduzir para &lt;strong&gt;modelo-vista-controlador&lt;/strong&gt;. Estas são também as três componentes base deste modelo.&lt;/p&gt;

&lt;h2 id=&#34;vista:451bfcfedd1834e71bbe73844715757f&#34;&gt;Vista&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://localhost:1313/images/olho.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;As vistas são os olhos da aplicação&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;A camada &lt;strong&gt;Vista&lt;/strong&gt; (&lt;em&gt;View&lt;/em&gt;) é aquela que é mostrada ao utilizador, aquela que com a qual o utilizador vai interagir. É a &lt;strong&gt;camada de apresentação&lt;/strong&gt;. A camada dos estilos, do &lt;em&gt;design&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Geralmente, esta camada não conta com lógica de programação podendo, por vezes, ser &amp;ldquo;puro&amp;rdquo; HTML com alguns bocados de outra linguagem para, por exemplo, inserir algum dado necessário.&lt;/p&gt;

&lt;h2 id=&#34;controladores:451bfcfedd1834e71bbe73844715757f&#34;&gt;Controladores&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://localhost:1313/images/cerebro.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Os controladores, o cérebro&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;A segunda camada a ser mencionada é a dos &lt;strong&gt;Controladores&lt;/strong&gt; (&lt;em&gt;Controllers&lt;/em&gt;) e é nela que &lt;strong&gt;a magia acontece&lt;/strong&gt;. É a camada intermédia do padrão MVC e toda a lógica está aqui contida.&lt;/p&gt;

&lt;p&gt;Quando acedemos a um site cujo modelo de programação tenha sido MVC, automaticamente acedemos ao controlador que vai receber o nosso pedido. Logo de seguida, ele coordena todos os processos seguintes: pedir informação, receber informação, mostrar a página (&lt;strong&gt;Vista&lt;/strong&gt;) ao utilizador, etc,&lt;/p&gt;

&lt;h2 id=&#34;modelos:451bfcfedd1834e71bbe73844715757f&#34;&gt;Modelos&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://localhost:1313/images/sist-nev.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;E o sistema nervoso&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Esta é a camada mais invisível ao utilizador. É nela que tudo o que tem haver com dados é feito: pedir coisas à base de dados, inserir coisas, eliminar coisas, trocar coisas, etc.&lt;/p&gt;

&lt;p&gt;O controlador (mencionado acima), envia informação para o modelo armazenar/apagar/etc da base de dados. De forma generalizada, o &lt;strong&gt;modelo&lt;/strong&gt; trabalha com os dados.&lt;/p&gt;

&lt;h2 id=&#34;é-útil:451bfcfedd1834e71bbe73844715757f&#34;&gt;É útil?&lt;/h2&gt;

&lt;p&gt;Diga-me você! Existem várias vantagens e desvantagens em trabalhar com o modelo MVC. Por um lado, é bom porque cada coisa está no seu devido sítio sendo mais fácil trabalhar e alterar estruturas.&lt;/p&gt;

&lt;p&gt;Por outro lado, não é recomendado para pequenas aplicações visto que a sua complexidade pode prejudicar um pouco a performance e também o design. &lt;strong&gt;Qual a sua opinião acerca do modelo MVC?&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP - Como utilizar o Gettext para traduções [Parte 2]</title>
      <link>http://localhost:1313/tutorials/php-como-utilizar-o-gettext-para-traducoes-parte-2</link>
      <pubDate>Sun, 28 Sep 2014 15:06:47 +0000</pubDate>
      
      <guid>http://localhost:1313/tutorials/php-como-utilizar-o-gettext-para-traducoes-parte-2</guid>
      <description>&lt;p&gt;Na &lt;a href=&#34;http://localhost:1313/tutorials/php-como-utilizar-o-gettext-para-traducoes/&#34;&gt;primeira parte&lt;/a&gt; deste artigo, ensinámos a configurar o Gettext em conjunto com o PHP de forma a que hoje possamos criar as nossas primeiras traduções.&lt;/p&gt;

&lt;p&gt;Agora é hora de criarmos as nossas primeiras traduções. Para isso, podemos instalar um programa chamado &lt;strong&gt;Poedit&lt;/strong&gt; que nos vai ajudar. Podem descarregá-lo &lt;a href=&#34;http://poedit.net/&#34;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Abra o Poedit e clique em &lt;strong&gt;Ficheiro → Novo&lt;/strong&gt; e selecione a língua &lt;strong&gt;mãe&lt;/strong&gt; do seu site. No nosso caso, é português de Portugal (pt-PT). Depois disso, guarde o ficheiro em &lt;code&gt;lang/site_multi_lingua.pot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Logo de seguida, clique em &lt;strong&gt;Extrair das fontes&lt;/strong&gt;. Agora, adicione o caminho do seu site na seção &lt;strong&gt;Caminhos&lt;/strong&gt; da aba &lt;strong&gt;Caminhos das fontes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;De seguida, dirija-se à aba &lt;strong&gt;Propriedades da tradução&lt;/strong&gt; e dê um nome ao projeto.Pode ainda escolher outras opções.&lt;/p&gt;

&lt;p&gt;Na última aba, &lt;strong&gt;Palavras-chave das fontes&lt;/strong&gt;, adicione &lt;code&gt;__&lt;/code&gt;  e &lt;code&gt;_e&lt;/code&gt;. Depois clique em &lt;strong&gt;OK&lt;/strong&gt; e espere que os ficheiros sejam analisados.&lt;/p&gt;

&lt;p&gt;Caso ocorra algum erro relacionado com caracteres não ASCII, clique em &lt;strong&gt;Catálogo → Propriedades → Codificação do código fonte&lt;/strong&gt; e selecione UTF-8. Depois clique em &lt;strong&gt;Atualizar.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Agora deverá ver um ecrã semelhante ao seguinte:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/poedit00.jpg&#34; alt=&#34;Poedit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Guarde este ficheiro e depois vá a &lt;strong&gt;Novo → Novo de ficheiro POT/PO&lt;/strong&gt;. Selecione o ficheiro base que gravou antes e escolha a nova língua.&lt;/p&gt;

&lt;p&gt;Agora basta clicar no item a traduzir e depois escrever a tradução na caixa de texto na parte de baixo do programa.&lt;/p&gt;

&lt;p&gt;Depois, grave o ficheiro em &lt;code&gt;lang/en_GB/LC_MESSAGES/site_multi_lingua.po&lt;/code&gt;. Altere &lt;code&gt;en_GB&lt;/code&gt; pela língua que criou.&lt;/p&gt;

&lt;p&gt;Agora, para testar se está tudo a funcionar, basta digital no URL &lt;code&gt;/?lang=en_GB&lt;/code&gt; ou outra que queira testar.&lt;/p&gt;

&lt;p&gt;Pode ver &lt;a href=&#34;https://github.com/hacdias/labs/tree/master/php/multi-lang&#34;&gt;neste repositório do GitHub&lt;/a&gt; todo o código que foi aqui produzido com alguns exemplos de linguagem adicionais.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Refiro ainda que o Gettext faz &lt;em&gt;caching _de todas as _strings&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>PHP - Como utilizar o Gettext para traduções [Parte 1]</title>
      <link>http://localhost:1313/tutorials/php-como-utilizar-o-gettext-para-traducoes</link>
      <pubDate>Sun, 21 Sep 2014 11:07:03 +0000</pubDate>
      
      <guid>http://localhost:1313/tutorials/php-como-utilizar-o-gettext-para-traducoes</guid>
      <description>

&lt;p&gt;Como prometido no &lt;a href=&#34;http://localhost:1313/explanations/php-wordpress-comandos-printf-sprintf/&#34;&gt;último artigo&lt;/a&gt;, hoje irá começar uma pequena saga de dois ou três artigos sobre como utilizar o Gettext no PHP.&lt;/p&gt;

&lt;p&gt;Com o &lt;strong&gt;gettext&lt;/strong&gt; podemos ter um site disponível em diversas linguagens de forma muito fácil e sem complicações. Nesta primeira parte, irá ser abordado como &lt;strong&gt;configurar o gettext&lt;/strong&gt; e as suas &lt;strong&gt;funções&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O gettext pode ser configurado no PHP através de uma extensão nativa ou através do uso de uma biblioteca separada.Nós iremos utilizar o segundo método por ser mais simples e fácil de configurar.&lt;/p&gt;

&lt;h2 id=&#34;download-e-estruturação:f7cadadb33380485931edab1f79d8ea6&#34;&gt;Download e estruturação&lt;/h2&gt;

&lt;p&gt;Antes de mais nada, aviso que é &lt;strong&gt;necessário&lt;/strong&gt; ter a extensão &lt;em&gt;mbstring&lt;/em&gt; ativada nas definições do PHP. Em primeiro lugar, deve fazer o &lt;em&gt;download&lt;/em&gt; do &lt;strong&gt;php-gettext&lt;/strong&gt; nesta &lt;a href=&#34;https://launchpad.net/php-gettext/&#34;&gt;página&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Depois de efetuar o &lt;em&gt;download&lt;/em&gt;, irá ter que descompactar o ficheiro transferido. Após a sua descompactação irá encontrar diversos ficheiros. Apenas iremos precisar dos seguintes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gettext.inc&lt;/code&gt; → Aliases de funções para utilizar no sistema;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gettext.php&lt;/code&gt; → Funções do gettext;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;streams.php&lt;/code&gt; → Classes e métodos que permitem ler ficheiros do gettext.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora crie uma pasta cujo conteúdo seja semelhante ao seguinte:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;site-multi-lingua/
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; lib /
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; gettext.inc
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; gettext.php
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;      streams.php
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; langs/
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; config.php
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; i18n.php
   index.php
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como pode visualizar, os ficheiros do gettext foram colocados dentro de uma pasta chamada `&lt;code&gt;lib&lt;/code&gt; e ainda foram adicionados três outros ficheiros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config.php&lt;/code&gt; → faz o carregamento das configurações;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i18n.php&lt;/code&gt; → contém a inicialização do gettext;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.php&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inicialmente tem que ser definida uma linguagem padrão. Nós iremos utilizar &amp;ldquo;pt_PT&amp;rdquo; ou seja, Português de Portugal.&lt;/p&gt;

&lt;p&gt;Para isso, edite o seu ficheiro _config.php _e coloque o seguinte:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;LANG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pt_PT&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;inicialização-do-gettext:f7cadadb33380485931edab1f79d8ea6&#34;&gt;Inicialização do Gettext&lt;/h2&gt;

&lt;p&gt;Agora que já existe uma linguagem padrão definida, a inicialização do gettext deve ser feita porém, primeiro tem que memorizar os seguintes conceitos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;locale&lt;/code&gt; → uma &lt;em&gt;string&lt;/em&gt; no formato &lt;code&gt;xx_XX&lt;/code&gt; que indica a linguagem. &amp;ldquo;pt&lt;em&gt;BR&amp;rdquo; é português do Brasil, &amp;ldquo;en_US&amp;rdquo; corresponde a Inglês dos Estados Unidos. Pode ler mais sobre estes prefixos [aqui](&lt;a href=&#34;http://pt.wikipedia.org/wiki/Internacionaliza%C3%A7%C3%A3o&#34;&gt;http://pt.wikipedia.org/wiki/Internacionaliza%C3%A7%C3%A3o&lt;/a&gt;&lt;/em&gt;(software)).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;textdomain&lt;/code&gt; → quer dizer &amp;ldquo;domínio de texto&amp;rdquo; e é um local onde as traduções vão ser colocadas. No nosso caso, apenas iremos utilizar um &lt;em&gt;textdomain&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, deve colocar no ficheiro &lt;strong&gt;i18n.php &lt;/strong&gt;o seguinte conteúdo:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;require_once&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;config.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$locale&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LANG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$textdomain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;site_multi_lingua&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$locales_dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dirname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;__FILE__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/lang&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;isset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;lang&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;lang&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$locale&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;lang&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;putenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;LANGUAGE=&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$locale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;putenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;LANG=&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$locale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;putenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;LC_ALL=&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$locale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;putenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;LC_MESSAGES=&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$locale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;require_once&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;lib/gettext.inc&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;_setlocale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LC_ALL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$locale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;_setlocale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LC_CTYPE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$locale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;_bindtextdomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$textdomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$locales_dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;_bind_textdomain_codeset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$textdomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;_textdomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$textdomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Poça! Tanta coisa! Mas para que serve tudo isto? Na &lt;strong&gt;linha 3&lt;/strong&gt;, o ficheiro &lt;code&gt;config.php&lt;/code&gt; é chamado pois é este que contém a constante da linguagem. Assim podemos já podemos utilizar essa constante neste ficheiro.&lt;/p&gt;

&lt;p&gt;Nas linhas seguintes (&lt;strong&gt;5 a 7&lt;/strong&gt;), a variável &lt;code&gt;$locale&lt;/code&gt; é definida, tal como o domínio de texto e o local onde irão estar os ficheiros de tradução que, neste caso, será numa pasta chamada lang .&lt;/p&gt;

&lt;p&gt;Mais à frente, nas &lt;strong&gt;linhas 8 a 9&lt;/strong&gt;, verificamos se existe uma variável chamada &lt;code&gt;lang&lt;/code&gt; a ser passada pelo URL. Se sim, reescrevemos o valor da variável &lt;code&gt;$locale&lt;/code&gt; com essa linguagem.&lt;/p&gt;

&lt;p&gt;Nas linhas seguintes, &lt;strong&gt;12 a 5&lt;/strong&gt;, as variáveis de ambiente do sistema operativo são alteradas para o locale  que está a ser utilizado.&lt;/p&gt;

&lt;p&gt;Na linha cuja posição é &lt;strong&gt;17&lt;/strong&gt;, a biblioteca php-gettext é carregada sendo logo a seguir (&lt;strong&gt;19 a 20&lt;/strong&gt;), o locale também carregado para o gettext.&lt;/p&gt;

&lt;p&gt;Seguidamente, &lt;strong&gt;nas linhas 22 a 24&lt;/strong&gt;, o textdomain é defido, tal como a codificação que será utilizada nesses ficheiros (UTF-8) e ainda dizemos onde vão estar as traduções.&lt;/p&gt;

&lt;p&gt;De seguida é criada uma função chamada &lt;code&gt;_e()&lt;/code&gt; que nos permite imprimir o resultado da função &lt;code&gt;__()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Agora, copiem e colem o seguinte no &lt;code&gt;index.php&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;require_once&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;i18n.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  &amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;lt;title&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Olá Mundo!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  &amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Olá Mundo!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De momento, ainda não existe nada de extraordinário a acontecer. Na próxima parte deste tutorial iremos falar em como criar as traduções!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP e WordPress: comandos &#39;printf&#39; e &#39;sprintf&#39;</title>
      <link>http://localhost:1313/explanations/php-wordpress-comandos-printf-sprintf</link>
      <pubDate>Sat, 13 Sep 2014 09:16:48 +0000</pubDate>
      
      <guid>http://localhost:1313/explanations/php-wordpress-comandos-printf-sprintf</guid>
      <description>

&lt;p&gt;No &lt;a href=&#34;http://localhost:1313/explanations/php-interpolacao-concatenacao/&#34;&gt;último artigo&lt;/a&gt; sugeriram-me falar sobre as funções printf  e  sprintf  que são utilizadas em massa no Wordpress e é isso que vou fazer! Vamos analisar cada uma das funções.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://localhost:1313/images/printfsprintf.jpg&#34; alt=&#34;PHP - Strings: interpolação e concatenação&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Vou começar por analisar as duas funções em separado, explicando para que servem e dando alguns exemplos.&lt;/p&gt;

&lt;h2 id=&#34;printf:e349da165fbbbc6e6ae9edeba8cd3125&#34;&gt;printf&lt;/h2&gt;

&lt;p&gt;O nome desta função quer dizer &lt;em&gt;print formatted&lt;/em&gt;, ou seja, &amp;ldquo;imprimir dados formatados&amp;rdquo;. Abaixo encontra um exemplo mais simples:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;printf(&amp;quot;Olá mundo!&amp;quot;);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//Olá mundo!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;E agora você pergunta-me: que utilidade tem essa função se podemos fazer o mesmo com &lt;code&gt;echo&lt;/code&gt; ou &lt;code&gt;print&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;É aqui que está função se destaca. Compare as seguintes impressões, todas vão imprimir o mesmo.&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$foo = &amp;quot;Henrique&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$bar = &amp;quot;14&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$site = &amp;quot;COXPE&amp;quot;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//Chamo-me Henrique, tenho 14 anos e estou a navegar no COXPE.&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;echo &amp;#39;Chamo-me &amp;#39; . $foo . &amp;#39;, tenho &amp;#39; . $bar . &amp;#39; anos e estou a navegar no &amp;#39; . $site . &amp;#39;.&amp;#39;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;echo &amp;quot;Chamo-me {$foo} tenho {$bar} anos e estou a navegar no {$site}.&amp;quot;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;printf(&amp;quot;Chamo-me %s e tenho %d anos e estou a navegar no %s.&amp;quot;,&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;	$foo, $bar, $site);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Se repararmos, das três, a última é a que tem uma maior legibilidade, tal como o leitor Carlos Santos tinha mencionado.&lt;/p&gt;

&lt;p&gt;Como pode ver, existe ali um &lt;code&gt;%s&lt;/code&gt; e um&lt;code&gt; %d&lt;/code&gt; que são substituídos pelas variáveis que coloco depois. Existem vários &amp;ldquo;por centos&amp;rdquo;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt; → imprime um sinal &amp;ldquo;%&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%b&lt;/code&gt; → permite o envio de um número inteiro que será imprimido em binário&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%c&lt;/code&gt; → permite o envio de um número inteiro e será imprimido o caractere ASCII correspondente.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%d&lt;/code&gt; → permite o envio de um número inteiro e imprime-o&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%e&lt;/code&gt; → o argumento é tratado como notação científica&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%E&lt;/code&gt; → igual ao anterior porém o &amp;ldquo;e&amp;rdquo; tem que ser maiúsculo (&amp;ldquo;12E5&amp;rdquo; em vez de &amp;ldquo;12e5&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%f&lt;/code&gt; → o argumento é tratado como &lt;em&gt;float&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%g&lt;/code&gt; → atalho para &lt;code&gt;%e&lt;/code&gt; e &lt;code&gt;%f&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%G&lt;/code&gt; → atalho para &lt;code&gt;%E&lt;/code&gt; e &lt;code&gt;%f&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estes são os mais utilizados porém podem ver mais &lt;a href=&#34;http://php.net/manual/en/function.sprintf.php&#34;&gt;aqui&lt;/a&gt;. Assim, para utilizar esta função, seguimos a seguinte sintaxe:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;printf($formato[, $restantesArgumentos...])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;O $formato  é a string que contém a frase a ser imprimida com as diversas diretivas que podem ser 0 ou mais. É indiferente.&lt;/p&gt;

&lt;p&gt;Os restantes argumentos são os dados que são para ser enviados para essas diretivas por ordem de aparecimento na string.&lt;/p&gt;

&lt;h2 id=&#34;sprintf:e349da165fbbbc6e6ae9edeba8cd3125&#34;&gt;sprintf&lt;/h2&gt;

&lt;p&gt;A única diferença entre esta função e a &lt;code&gt;printf&lt;/code&gt;  é que esta &lt;strong&gt;retorna&lt;/strong&gt; a string formatada e &lt;code&gt;printf&lt;/code&gt;  &lt;strong&gt;imprime&lt;/strong&gt; a string formatada.&lt;/p&gt;

&lt;h2 id=&#34;wordpress-traduções-e-estas-funções:e349da165fbbbc6e6ae9edeba8cd3125&#34;&gt;WordPress, traduções e estas funções&amp;hellip;&lt;/h2&gt;

&lt;p&gt;O WordPress usa estas funções em massa juntamente com o sistema de tradução tornando esta função extremamente potente.&lt;/p&gt;

&lt;p&gt;Este CMS usa o sistema &lt;a href=&#34;Gettext&#34;&gt;Gettext&lt;/a&gt; para traduzir o conteúdo que nos é visível. Agora não vamos entrar em detalhes sobre a ativação deste sistema (se tiverem qualquer dúvida coloquem).&lt;/p&gt;

&lt;p&gt;O WordPress deve utilizar este sistema também pela simplicidade de leitura visto que os comandos de tradução do Gettext são um quanto &amp;ldquo;complicados&amp;rdquo; de ler.&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;//Exemplo de &amp;quot;printf&amp;quot; utilizado pelo WordPress&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;printf( __( &amp;#39;Ready to publish your first post? &amp;lt;a href=&amp;quot;%1$s&amp;quot;&amp;gt;Get started here&amp;lt;/a&amp;gt;.&amp;#39;, &amp;#39;twentyfourteen&amp;#39; ), admin_url( &amp;#39;post-new.php&amp;#39; ) );&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//Em Echo&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$url = admin_url( &amp;#39;post-new.php&amp;#39; );&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;echo __( &amp;quot;Ready to publish your first post? &amp;lt;a href=&amp;quot;{$url}&amp;quot;&amp;gt;Get started here&amp;lt;/a&amp;gt;.&amp;quot;, &amp;#39;twentyfourteen&amp;#39; );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;A forma que coloquei com echo poderia variar. Mas, como pode visualizar, o printf é mais simples de ler.&lt;/p&gt;

&lt;p&gt;Vou deixar esta parte para um outro artigo ;) Deixo já nos rascunhos. Em breve poderei fazer um artigo sobre o Gettext, como ativar e usar! =D&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;A partir de segunda-feira, a frequência de lançamento de artigos irá diminuir porque a escola vai recomeçar. Continuarei a lançar a &lt;a href=&#34;http://pplware.sapo.pt/tutoriais/programacao/vamos-programar-introducao-a-programacao-2/&#34;&gt;rubrica semanal&lt;/a&gt; com o Pplware e também no &lt;a href=&#34;http://kids.pplware.sapo.pt/&#34;&gt;Pplware Kids&lt;/a&gt;. Isto não quer dizer que deixarei de escrever para o COXPE. Sempre que puder, virei aqui :) Obrigado pela compreensão.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP - Strings: interpolação e concatenação</title>
      <link>http://localhost:1313/explanations/php-interpolacao-concatenacao</link>
      <pubDate>Tue, 09 Sep 2014 15:19:43 +0000</pubDate>
      
      <guid>http://localhost:1313/explanations/php-interpolacao-concatenacao</guid>
      <description>

&lt;p&gt;Hoje vamos falar um pouco sobre PHP, mais precisamente no campo das strings, variáveis e concatenações. Como sabem, existem várias formas de inserir o valor de variáveis dentro de strings, mas qual será a &amp;ldquo;melhor&amp;rdquo; e mais rápida?&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://localhost:1313/images/phpinterpolacaoconcatenacao.jpg&#34; alt=&#34;PHP - Strings: interpolação e concatenação&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Em primeiro lugar, vamos rever as formas de inserir variáveis dentro de &lt;em&gt;strings&lt;/em&gt; atualmente já existentes:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;uma pessoa&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$bar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Eu sou &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; 1&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$bar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Eu sou &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; 2&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$bar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Eu sou &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$foo&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; 3&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$bar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Eu sou &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos analisar os quatro exemplos acima sendo que os primeiros dois é utilizada &lt;strong&gt;concatenação&lt;/strong&gt; e nos últimos dois &lt;strong&gt;interpolação&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;métodos-1-e-2:2784d983cbda87ee9c00b8472de3a7a0&#34;&gt;Métodos 1 e 2&lt;/h2&gt;

&lt;p&gt;Vamos começar por analisar o primeiro. Neste caso, o segundo método devia ser utilizado ao invés do primeiro. Porquê?&lt;/p&gt;

&lt;p&gt;As aspas duplas dizem ao PHP para iniciar a interpolação gastando mais recursos e podendo demorar mais tempo. Devemos utilizar a aspa única quando não utilizamos nenhum benefício da interpolação como &lt;code&gt;n&lt;/code&gt;, por exemplo.&lt;/p&gt;

&lt;h2 id=&#34;métodos-3-e-4:2784d983cbda87ee9c00b8472de3a7a0&#34;&gt;Métodos 3 e 4&lt;/h2&gt;

&lt;p&gt;Em relação ao terceiro e quarto, é indiferente porém o uso de chavetas é extremamente recomendado quando se inserem variáveis mais complexas como &lt;em&gt;arrays&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Caso sejam variáveis simples, o uso de chavetas é desnecessário não trazendo benefícios nem malefícios.&lt;/p&gt;

&lt;h2 id=&#34;qual-devo-usar:2784d983cbda87ee9c00b8472de3a7a0&#34;&gt;Qual devo usar?&lt;/h2&gt;

&lt;p&gt;Depende! Geralmente, a interpolação é mais lenta porém, a concatenação pode tornar-se mais lenta caso sejam utilizadas muitas variáveis.&lt;/p&gt;

&lt;p&gt;Executei seguinte teste para confirmar as velocidades que cada um demora a correr (função &lt;a href=&#34;http://stackoverflow.com/questions/13620/speed-difference-in-using-inline-strings-vs-concatenation-in-php5&#34;&gt;timeFunc&lt;/a&gt; obtida aqui):&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;timeFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$runs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$times&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$runs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;microtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;call_user_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$times&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;microtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;array_sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$times&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$runs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Method1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;uma pessoa&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Eu sou &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Method2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;uma pessoa&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Eu sou &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//2&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Method3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;uma pessoa&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Eu sou &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$foo&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//3&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Method4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;uma pessoa&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Eu sou &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$foo&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//4&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Method1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; 0.0020885&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Method2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; 0.0021168&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Method3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; 0.0021132&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;timeFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Method4&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// =&amp;gt; 0.0023884&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Recebi os valores mencionados nos comentários. Como podem ver, não existem grandes diferenças no tempo de execução destes pequenos exemplos. Espero que o post tenha sido útil.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP 5.6 - Funções Variádicas (Nova Sintaxe)</title>
      <link>http://localhost:1313/explanations/php-56-funcoes-variadicas-nova-sintaxe</link>
      <pubDate>Sun, 31 Aug 2014 09:37:05 +0000</pubDate>
      
      <guid>http://localhost:1313/explanations/php-56-funcoes-variadicas-nova-sintaxe</guid>
      <description>

&lt;p&gt;Há pouco mais de dois dias, foi lançada uma nova versão do PHP, &lt;a href=&#34;http://php.net/archive/2014.php#id2014-08-28-1&#34;&gt;a versão 5.6.0&lt;/a&gt; que trouxe inúmeras novidades e incompatibilidades com as versões anteriores &lt;a href=&#34;http://pt2.php.net/manual/en/migration56.php&#34;&gt;(ver aqui)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hoje vamos falar de uma das diversas grandes novidades desta esplêndida atualização, as &lt;strong&gt;funções variádicas&lt;/strong&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://localhost:1313/images/funcoesvariadicas560.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Ao longo das versões 4.x e 5.x do PHP, os desenvolvedores já podiam utilizar funções variádicas através do uso da função &lt;code&gt;func_get_args()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Se, por exemplo, quiséssemos criar uma função que fizesse a soma de todos os valores passados nos argumentos, bastaria fazermos assim:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;function soma() {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  return array_sum(func_get_args());&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;echo soma(1, 4, 12, 20); // =&amp;gt; 37&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Apesar desta forma ainda estar disponível na versão 5.6.0, a sua sintaxe pode ser aprimorada para a seguinte:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;function soma(...$nums) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  return array_sum($nums);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;echo soma(1, 4, 12, 20); //= 37&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Ou seja, na nova versão do PHP, basta utilizarmos o operador &amp;hellip;  para criarmos um &lt;em&gt;array&lt;/em&gt; que contenha todos os restantes parâmetros enviados.&lt;/p&gt;

&lt;h2 id=&#34;perda-de-tempo-menor:49a54b9d504b4767ba55a4663de4b4cd&#34;&gt;Perda de tempo menor&lt;/h2&gt;

&lt;p&gt;Uma vantagem na utilização deste método é a &lt;strong&gt;menor perda de tempo&lt;/strong&gt;. Como assim? Vou utilizar um exemplo dado pelos colegas do &lt;a href=&#34;http://imasters.com.br&#34;&gt;imasters.com.br&lt;/a&gt;. Em vez de escrevermos assim:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;public function tryMethod() {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;        $args = func_get_args();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $method = $args[0];&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        unset($args[0]);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $args = array_values($args);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    try {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;        return call_user_func_array([$this, $method], $args);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    } catch (Exception $e) {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;        return false;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Podemos, simplesmente, escrever da seguinte forma:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;public function tryMethod($method, ...$args) {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    try {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;        return call_user_func_array([$this, $method], $args);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    } catch (Exception $e) {&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;        return false;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id=&#34;legibilidade:49a54b9d504b4767ba55a4663de4b4cd&#34;&gt;Legibilidade&lt;/h2&gt;

&lt;p&gt;Simples, não é? Outra grande vantagem é a &lt;strong&gt;legibilidade&lt;/strong&gt; visto que o código fica mais legível utilizando esta sintaxe. O exemplo acima é, também, um bom exemplo para este ponto.&lt;/p&gt;

&lt;h2 id=&#34;conclusão:49a54b9d504b4767ba55a4663de4b4cd&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Falando mais no geral e vendo a lista de &lt;a href=&#34;http://pt2.php.net/manual/pt_BR/migration56.new-features.php&#34;&gt;novas funcionalidades/alterações&lt;/a&gt; da nova versão do PHP, podemos verificar que a versão traz muitas melhorias.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;O que acham vocês, leitores e desenvolvedores, desta nova versão do PHP?&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>5 truques e dicas em PHP</title>
      <link>http://localhost:1313/explanations/truques-dicas-em-php</link>
      <pubDate>Fri, 29 Aug 2014 16:47:20 +0000</pubDate>
      
      <guid>http://localhost:1313/explanations/truques-dicas-em-php</guid>
      <description>

&lt;p&gt;A linguagem de programação PHP é das mais utilizadas atualmente do lado do servidor quando o assunto são páginas web.&lt;/p&gt;

&lt;p&gt;Para os iniciantes ou mesmo profissionais, aqui estão 5 simples e úteis truques e dicas para aplicarem quando estão a escrever em PHP.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://localhost:1313/images/php5dicas.jpg&#34; alt=&#34;5 truques e dicas em PHP&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;1-utilizar-o-operador-ternário:142d40d378f82790ef24274f222d6b1c&#34;&gt;1. Utilizar o operador ternário&lt;/h2&gt;

&lt;p&gt;Nós já escrevemos um artigo sobre este operador que podem ver &lt;a href=&#34;http://localhost:1313/explanations/operador-ternario/&#34;&gt;aqui&lt;/a&gt;. Para laços (&lt;em&gt;loops&lt;/em&gt;) simples, podemos utilizar o operador ternário de forma a poupar espaço como podem ver no exemplo seguinte:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$n = rand(0,100);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;if ($n &amp;gt; 50) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    echo &amp;#39;O número é maior que 50!&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;} else {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    echo &amp;#39;O número é menor que 50!&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//Utilizando o operador ternário ficaria:&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;echo ($n &amp;gt; 50) ? &amp;#39;O número é maior que 50!&amp;#39; : &amp;#39;O número é menor que 50!&amp;#39;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//O leitor Gustavo Rafael sugeriu uma forma mais simplificada:&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;echo &amp;#39;O número é &amp;#39; . (($n &amp;gt; 50) ? &amp;#39;maior&amp;#39; : &amp;#39;menor&amp;#39;) . &amp;#39; que 50!&amp;#39;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id=&#34;2-nunca-mais-te-voltas-a-enganar-nos-ifs:142d40d378f82790ef24274f222d6b1c&#34;&gt;2. Nunca mais te voltas a enganar nos &lt;code&gt;ifs&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Um erro muito cometido é atribuir um valor a uma variável dentro de uma condição ou seja, colocamos &lt;code&gt;$x = 1&lt;/code&gt; ao invés de &lt;code&gt;$x == 1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O mais &amp;ldquo;engraçado&amp;rdquo; é que o PHP não dá erro e, por vezes, gastamos muito tempo à procura da fonte do problema.&lt;/p&gt;

&lt;p&gt;Esta situação pode ser invertida colocando a variável na segunda posição. Assim, o PHP irá gerar um erro quando nos enganamos:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;//Não produz erro&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;if ( $userRole = 0 ) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;   echo &amp;#39;Você é Administrador.&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;//Produz erro&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;if ( 0 = $userRole ) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;   echo &amp;#39;Você é Administrador.&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;O que acontece aqui, é que o PHP não nos vai deixar atribuir um valor a um valor (um pouco redundante), gerando erro.&lt;/p&gt;

&lt;h2 id=&#34;3-saber-se-o-número-é-par-ou-ímpar:142d40d378f82790ef24274f222d6b1c&#34;&gt;3. Saber se o número é par ou ímpar&lt;/h2&gt;

&lt;p&gt;À primeira vista pode parecer algo muito pouco importante porém pode ser muito útil nas mais diversas situações.&lt;/p&gt;

&lt;p&gt;Existe uma forma extremamente simples de saber se um número é par ou ímpar. Veja:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$n = 1250;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;// ex1&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;echo ($n &amp;amp; 1) ? &amp;quot;Ímpar&amp;quot; : &amp;quot;Par&amp;quot;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;// ex2&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;if ($n &amp;amp; 1) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  // o que fazer se o número for ímpar&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;} else {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  // o que fazer se o número for par&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id=&#34;4-não-deve-utilizar-funções-dentro-de-laços:142d40d378f82790ef24274f222d6b1c&#34;&gt;4. Não deve utilizar funções dentro de laços&lt;/h2&gt;

&lt;p&gt;Quando utilizamos funções dentro de um laço, esta função é chamada sempre que o laço é executado tornando o tempo de execução mais lento. Exemplo:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;for ($i = 0; $i &amp;lt; count($array); $i) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  //Sempre que este laço é executado, a função count() será chamada.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id=&#34;5-comparar-2-conjuntos-de-caracteres-strings:142d40d378f82790ef24274f222d6b1c&#34;&gt;5. Comparar 2 conjuntos de caracteres (&lt;code&gt;strings&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;Última mas não menos importante. Mais uma que pode parecer desnecessária, mas pode ser muito útil. Exemplo:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$frase1 = &amp;#39;Não se esqueçam de gostar a nossa página do Facebook&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$frase2 = &amp;#39;Não se esqueçam de seguir a nossa página do Google+&amp;#39;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;// criação da comparação&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;similar_text($frase1, $frase2, $howMuchEqual);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;// a variável $hoeMuchEqual vai conter a percentagem de igualdade entre as duas frases.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;// neste caso, $howMuchEqual será igual a 82.56880733945&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;Como podem ver, as dicas mais simples podem vir a ser muito úteis.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP - Devemos usar a tag de fechamento ou não?</title>
      <link>http://localhost:1313/explanations/php-devemos-usar-tag-fechamento-ou-nao</link>
      <pubDate>Wed, 27 Aug 2014 09:15:18 +0000</pubDate>
      
      <guid>http://localhost:1313/explanations/php-devemos-usar-tag-fechamento-ou-nao</guid>
      <description>

&lt;p&gt;Recentemente comecei a reparar que muitos programadores omitiam a tag de fechamento dos ficheiros PHP e, obviamente, fiquei curioso.&lt;/p&gt;

&lt;p&gt;Depois de uma pesquisa, trago-vos o &lt;strong&gt;porquê&lt;/strong&gt; de não utilizar a tag &lt;code&gt;?&amp;gt;&lt;/code&gt; no final dos ficheiros.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://localhost:1313/images/phptagfechamento.png&#34; alt=&#34;PHP - Devemos usar a tag de fechamento ou não?&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Em primeiro lugar, esta prática só deve ser realizada em ficheiros cujo seu conteúdo seja &lt;strong&gt;somente PHP&lt;/strong&gt; e não contenha HTML, por exemplo.&lt;/p&gt;

&lt;h2 id=&#34;o-que-acontece-se:28ef2dafecfeffa0dabf42801406fb11&#34;&gt;O que acontece se&amp;hellip;?&lt;/h2&gt;

&lt;p&gt;Vamos começar por debater a pergunta que vocês vêm aí em cima: &lt;strong&gt;o que acontece&lt;/strong&gt; se omitirmos a &lt;em&gt;tag&lt;/em&gt; de fechamento.&lt;/p&gt;

&lt;p&gt;A resposta é muito simples: se omitirmos a &lt;em&gt;tag&lt;/em&gt; de fechamento de PHP, este irá tratar todos os espaços vazios e quebras de linha como caracteres &amp;ldquo;inúteis&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Agora, invertendo a pergunta, &lt;strong&gt;o que acontece se utilizarmos a tag de fechamento&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Se o fizermos, tudo o que se encontra depois dessa tag irá ser enviado para o browser e, além disso poderá haver problemas com os cabeçalhos HTTP.&lt;/p&gt;

&lt;h2 id=&#34;como-assim:28ef2dafecfeffa0dabf42801406fb11&#34;&gt;Como assim?&lt;/h2&gt;

&lt;p&gt;Existem diversas funções que utilizamos frequentemente no código como &lt;code&gt;session_start()&lt;/code&gt;, &lt;code&gt;header()&lt;/code&gt;, dentro de muitas outras que alteram estes cabeçalhos.&lt;/p&gt;

&lt;p&gt;Ou seja, se alguém cometer qualquer descuido e colocar, simplesmente, diversas linhas em branco no ficheiro, poderá ocorrer um erro ao utilizar funções que utilizem os cabeçalhos.&lt;/p&gt;

&lt;h2 id=&#34;assim:28ef2dafecfeffa0dabf42801406fb11&#34;&gt;Assim&amp;hellip;&lt;/h2&gt;

&lt;p&gt;Depois de eu próprio ter lido tudo isto descobri a solução a um grande problema que estava a ter:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cannot modify header information – headers already sent&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Este erro leva-nos, por vezes, a grandes &amp;ldquo;buscas&amp;rdquo; sendo o problema simplesmente simples. E que tal, já sabiam desta pequena &amp;ldquo;dica&amp;rdquo;?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Edição:&lt;/strong&gt; Criei um &lt;a href=&#34;https://gist.github.com/hacdias/aacf68dd880e9fb15447&#34;&gt;Gist&lt;/a&gt; no GitHub com alguns exemplos. Sintam-se livres para colaborar :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Como utilizar a API de Passwords do PHP 5.5&#43;</title>
      <link>http://localhost:1313/tutorials/como-utilizar-api-passwords-php-55</link>
      <pubDate>Wed, 20 Aug 2014 22:16:15 +0000</pubDate>
      
      <guid>http://localhost:1313/tutorials/como-utilizar-api-passwords-php-55</guid>
      <description>

&lt;p&gt;Como muitas das novidades introduzidas na &lt;a href=&#34;http://php.net/manual/en/migration55.changes.php&#34;&gt;versão 5.5&lt;/a&gt; do PHP, a API de passwords não passou despercebida aos desenvolvedores. Hoje vamos falar da criação de hash de passwords utilizando esta API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/api_passwords.jpg&#34; alt=&#34;Como utilizar a API de Passwords do PHP 5.5+&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Antes de começarmos a analisar como se criam as passwords, vamos ver que novas funções trouxe &lt;a href=&#34;http://php.net/manual/en/book.password.php&#34;&gt;esta API&lt;/a&gt; para o PHP:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;password_get_info&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_hash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_needs_rehash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_verify&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cada uma tem uma função diferente porém estão todas relacionadas. Assim, vamos falar de cada uma destas funções. Vamos começar!&lt;/p&gt;

&lt;h2 id=&#34;password-hash:f2cd69faba962abe878d8e6257d3bccb&#34;&gt;password_hash&lt;/h2&gt;

&lt;p&gt;Esta função pode ser considerada a principal do conjunto pois é com ela que criamos as &lt;em&gt;hash&lt;/em&gt; e deve ser utilizada da seguinte forma:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$password = &amp;#39;a_minha_password&amp;#39;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Da seguinte forma podemos gerar a hash de uma password&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * utilizando o algoritmo que está definido em DEFAULT.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Na versão 5.5.0 do PHP este algoritmo correponde ao BCRYPT&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * A hash vai ter o comprimento de, no mínimo, 60 caracteres.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Este comprimento pode alterar em novas versões do PHP.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;password_hash($password, PASSWORD_DEFAULT);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Podemos ainda definir alguns parâmetros opcionais nomeadamente o &lt;code&gt;cost&lt;/code&gt; (&amp;ldquo;custo&amp;rdquo;) e o &lt;code&gt;salt&lt;/code&gt; (&amp;ldquo;sal&amp;rdquo;) da seguinte forma:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$password = &amp;#39;a_minha_password&amp;#39;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Da seguinte forma podemos gerar a hash de uma password&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * utilizando o algoritmo BCRYPT.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Podemos definir duas opções no terceiro parâmetro:&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *  COST  =&amp;gt;  Por padrão, será criado um novo por cada nova&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * hash criada porém pode ser definido.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *  SALT  =&amp;gt;  Por padrão, o valor 10 irá ser utilizado porém&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * pode ser alterado à semelhança do anterior.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;$options = array(&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;#39;cost&amp;#39;  =&amp;gt; 13,&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;#39;salt&amp;#39;  =&amp;gt; mcrypt_create_iv(25, MCRYPT_DEV_URANDOM)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  );&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;password_hash($password, PASSWORD_BCRYPT, $options);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Acrescento ainda que a função retornará &lt;code&gt;false&lt;/code&gt; em caso de erro.&lt;/p&gt;

&lt;h2 id=&#34;password-verify:f2cd69faba962abe878d8e6257d3bccb&#34;&gt;password_verify&lt;/h2&gt;

&lt;p&gt;Depois de criarmos a &lt;em&gt;hash&lt;/em&gt; vamos precisar de, evidentemente, confirmá-la. Para confirmar se uma password corresponde a uma hash basta utilizarmos esta função da seguinte forma:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Para utilizar esta função basta colocar a password&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * a verificar no primeiro parâmetro e a hash no segundo.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Não precisa de se preocupar se colocou algum &amp;quot;salt&amp;quot; ou&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * &amp;quot;cost&amp;quot; personalizados pois esta informação está embutida&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * na hash.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * A função irá returnar os valores &amp;quot;true&amp;quot; ou &amp;quot;false&amp;quot;.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;$password = &amp;#39;teste&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$hash = &amp;#39;$2y$10$M.3t0/gmB12IrSETmINf7uy9XhruDrmB8vjaktfd5vC8AfVPH695.&amp;#39;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;password_verify($password, $hash);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id=&#34;password-get-info:f2cd69faba962abe878d8e6257d3bccb&#34;&gt;password_get_info&lt;/h2&gt;

&lt;p&gt;Esta informação permite-nos obter a informação acerca de uma hash. A informação obtida corresponde ao algoritmo, o seu nome e as opções dadas quando criámos a hash. Exemplo:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;//Criação de uma hash de exemplo&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;$options = array(&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;#39;cost&amp;#39;  =&amp;gt; 13,&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;#39;salt&amp;#39;  =&amp;gt; mcrypt_create_iv(25, MCRYPT_DEV_URANDOM)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  );&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;$hash = password_hash(&amp;#39;a_minha_password&amp;#39;, PASSWORD_BCRYPT, $options);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Utilizando a função password_get_info, vamos obter as diversas opções&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * enviadas quando criámos a hash.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;$info = password_get_info($hash);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Assim, var_dump($info) irá retornar o seguinte:&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * array(3) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * 	[&amp;quot;algo&amp;quot;]=&amp;gt; int(1)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *	[&amp;quot;algoName&amp;quot;]=&amp;gt; string(6) &amp;quot;bcrypt&amp;quot;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *	[&amp;quot;options&amp;quot;]=&amp;gt; array(1)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *		{ [&amp;quot;cost&amp;quot;]=&amp;gt; int(13) }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *	}&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id=&#34;password-needs-rehash:f2cd69faba962abe878d8e6257d3bccb&#34;&gt;password_needs_rehash&lt;/h2&gt;

&lt;p&gt;Esta função permite-nos confirmar se uma hash já criada corresponde a uma array de opções e a um algoritmos. Podem observar mais no seguinte exemplo:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;//Criação de uma hash de exemplo&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;$options = array(&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;#39;cost&amp;#39;  =&amp;gt; 13,&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;#39;salt&amp;#39;  =&amp;gt; mcrypt_create_iv(25, MCRYPT_DEV_URANDOM)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  );&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;$hash = password_hash(&amp;#39;a_minha_password&amp;#39;, PASSWORD_BCRYPT, $options);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * A função seguinte irá retornar true porque todas as opções corresponde&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * às que foram dadas anteriormente.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;password_needs_rehash($hash, 0, $options);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Se tiver qualquer dúvida relacionada ao segundo parâmetro da função, sugiro-lhe a leitura &lt;a href=&#34;http://php.net/manual/pt_BR/password.constants.php&#34;&gt;desta página&lt;/a&gt; e também que verifique os valores obtidos com &lt;code&gt;password_get_info&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Espero que dê bom uso a esta função :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guardar os erros do PHP num ficheiro com o .htaccess</title>
      <link>http://localhost:1313/tutorials/guardar-os-erros-php-num-ficheiro-com-o-htaccess</link>
      <pubDate>Thu, 14 Aug 2014 10:41:38 +0000</pubDate>
      
      <guid>http://localhost:1313/tutorials/guardar-os-erros-php-num-ficheiro-com-o-htaccess</guid>
      <description>&lt;p&gt;Quando os programadores de soluções web estão a programar alguma aplicação é normal que possam surgir erros durante o desenvolvimento e a linguagem de programação, por norma, mostra-os no browser.&lt;/p&gt;

&lt;p&gt;Mesmo depois do desenvolvimento concluído e do produto lançado, podem surgir erros porém é pouco profissional mostrar os erros &amp;ldquo;à paisana&amp;rdquo; no browser do utilizador sendo até uma boa &amp;ldquo;ajuda&amp;rdquo; para hackers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/phperros.jpg&#34; alt=&#34;Guardar os erros do PHP num ficheiro com o .htaccess&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Hoje vamos explicar como podemos utilizar o ficheiro &lt;code&gt;.htaccess&lt;/code&gt; para fazer o registo em log (&lt;em&gt;logging&lt;/em&gt;) dos erros dados pela linguagem de programação PHP num ficheiro.&lt;/p&gt;

&lt;p&gt;Como devem ter previsto, o único ficheiro que é necessário modificar é o &lt;code&gt;.htaccess&lt;/code&gt;. Vamos começar por definir algumas &lt;code&gt;php_flags&lt;/code&gt; de forma a não mostrar nenhum erro ao utilizador.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;# Não mostra erros de inicialização&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_flag&lt;/span&gt; display_startup_errors &lt;span class=&#34;k&#34;&gt;off&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# Não mostra os restantes erros&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_flag&lt;/span&gt; display_errors &lt;span class=&#34;k&#34;&gt;off&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# Não mostra erros de markup HTML&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_flag&lt;/span&gt; html_errors &lt;span class=&#34;k&#34;&gt;off&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O código acima, e o restante, está comentado para saber o que faz cada linha. Agora, depois de termos desativado os erros &amp;ldquo;ao público&amp;rdquo;, vamos fazer com que estes sejam guardados num ficheiro.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;# Ativa o registo em log dos erros&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_flag&lt;/span&gt; log_errors &lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# Desativa a ignoração a erros repetidos&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_flag&lt;/span&gt; ignore_repeated_errors &lt;span class=&#34;k&#34;&gt;off&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# Desativa &amp;quot;Ignorar erros de fonte única&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_flag&lt;/span&gt; ignore_repeated_source &lt;span class=&#34;k&#34;&gt;off&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# Ativa log de vazamentos de memória do php&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_flag&lt;/span&gt; report_memleaks &lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# Preserva os erros mais recentes&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_flag&lt;/span&gt; track_errors &lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# Desativa a formatação de erros com links de referência&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_value&lt;/span&gt; docref_root &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_value&lt;/span&gt; docref_ext &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# Especifica um caminho para o ficheiro de log&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_value&lt;/span&gt; error_log &lt;span class=&#34;sx&#34;&gt;/home/error.log&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;# Especifica para guardar todos os erros&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_value&lt;/span&gt; error_reporting -1
&lt;span class=&#34;c&#34;&gt;# Desativa o tamanho máximo de erros&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_value&lt;/span&gt; log_errors_max_len &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora os erros já estão a ser guardados num ficheiro de log, mas continua a existir um problema. Se acedermos ao URL onde está guardado, vamos poder aceder ao ficheiro.&lt;/p&gt;

&lt;p&gt;Isto pode ser utilizado como arma por qualquer pessoa, nomeadamente por &lt;em&gt;hackers&lt;/em&gt;. Vamos então proteger o ficheiro de forma a que o público não lhe tenha acesso.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;# Proteger o ficheiro&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;Files&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;error.log&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&#34;nb&#34;&gt;Order&lt;/span&gt; allow,deny
 &lt;span class=&#34;nb&#34;&gt;Deny&lt;/span&gt; from &lt;span class=&#34;k&#34;&gt;all&lt;/span&gt;
 &lt;span class=&#34;nb&#34;&gt;Satisfy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;All&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Files&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não se esqueçam de colocar o nome do ficheiro correto substituindo &lt;code&gt;error.log&lt;/code&gt; pelo nome que querem. Alerto também para alterarem o caminho &lt;code&gt;/home/error.log&lt;/code&gt; para o caminho em questão. Aqui está o código completo sem qualquer comentário, excelente para ser utilizado:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nb&#34;&gt;php_flag&lt;/span&gt; display_startup_errors &lt;span class=&#34;k&#34;&gt;off&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_flag&lt;/span&gt; display_errors &lt;span class=&#34;k&#34;&gt;off&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_flag&lt;/span&gt; html_errors &lt;span class=&#34;k&#34;&gt;off&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_flag&lt;/span&gt; log_errors &lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_flag&lt;/span&gt; ignore_repeated_errors &lt;span class=&#34;k&#34;&gt;off&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_flag&lt;/span&gt; ignore_repeated_source &lt;span class=&#34;k&#34;&gt;off&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_flag&lt;/span&gt; report_memleaks &lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_flag&lt;/span&gt; track_errors &lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_value&lt;/span&gt; docref_root &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_value&lt;/span&gt; docref_ext &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_value&lt;/span&gt; error_log &lt;span class=&#34;sx&#34;&gt;/home/error.log&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;php_value&lt;/span&gt; error_reporting -1
&lt;span class=&#34;nb&#34;&gt;php_value&lt;/span&gt; log_errors_max_len &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;&amp;lt;Files&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;error.log&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&#34;nb&#34;&gt;Order&lt;/span&gt; allow,deny
 &lt;span class=&#34;nb&#34;&gt;Deny&lt;/span&gt; from &lt;span class=&#34;k&#34;&gt;all&lt;/span&gt;
 &lt;span class=&#34;nb&#34;&gt;Satisfy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;All&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Files&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Depois de fazerem as edições no caminho e nome do ficheiro, basta guardarem o vosso .htaccess  e verificam que os erros produzidos pelo PHP irão ser salvos no ficheiro em questão.&lt;/p&gt;

&lt;p&gt;Acrescento que, a qualquer momento, pode utilizar a função &lt;code&gt;error_log(&#39;Erro aqui&#39;)&lt;/code&gt; do PHP para enviar um erro para o log.&lt;/p&gt;

&lt;p&gt;Espero que este artigo vos tenha ajudado :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edição:&lt;/strong&gt; Tal como o leitor António mencionou, isto apenas funciona caso o PHP tenha o &lt;a href=&#34;http://support.tigertech.net/php-value&#34;&gt;módulo do Apache ativo. &lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
