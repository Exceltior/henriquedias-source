<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Seguranca on Henrique Dias</title>
    <link>http://localhost:1313/tags/seguranca/</link>
    <description>Recent content in Seguranca on Henrique Dias</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Aug 2014 22:16:15 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/seguranca/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Como utilizar a API de Passwords do PHP 5.5&#43;</title>
      <link>http://localhost:1313/tutorials/como-utilizar-api-passwords-php-55</link>
      <pubDate>Wed, 20 Aug 2014 22:16:15 +0000</pubDate>
      
      <guid>http://localhost:1313/tutorials/como-utilizar-api-passwords-php-55</guid>
      <description>

&lt;p&gt;Como muitas das novidades introduzidas na &lt;a href=&#34;http://php.net/manual/en/migration55.changes.php&#34;&gt;versão 5.5&lt;/a&gt; do PHP, a API de passwords não passou despercebida aos desenvolvedores. Hoje vamos falar da criação de hash de passwords utilizando esta API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/api_passwords.jpg&#34; alt=&#34;Como utilizar a API de Passwords do PHP 5.5+&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Antes de começarmos a analisar como se criam as passwords, vamos ver que novas funções trouxe &lt;a href=&#34;http://php.net/manual/en/book.password.php&#34;&gt;esta API&lt;/a&gt; para o PHP:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;password_get_info&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_hash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_needs_rehash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password_verify&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cada uma tem uma função diferente porém estão todas relacionadas. Assim, vamos falar de cada uma destas funções. Vamos começar!&lt;/p&gt;

&lt;h2 id=&#34;password-hash:f2cd69faba962abe878d8e6257d3bccb&#34;&gt;password_hash&lt;/h2&gt;

&lt;p&gt;Esta função pode ser considerada a principal do conjunto pois é com ela que criamos as &lt;em&gt;hash&lt;/em&gt; e deve ser utilizada da seguinte forma:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$password = &amp;#39;a_minha_password&amp;#39;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Da seguinte forma podemos gerar a hash de uma password&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * utilizando o algoritmo que está definido em DEFAULT.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Na versão 5.5.0 do PHP este algoritmo correponde ao BCRYPT&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * A hash vai ter o comprimento de, no mínimo, 60 caracteres.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Este comprimento pode alterar em novas versões do PHP.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;password_hash($password, PASSWORD_DEFAULT);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Podemos ainda definir alguns parâmetros opcionais nomeadamente o &lt;code&gt;cost&lt;/code&gt; (&amp;ldquo;custo&amp;rdquo;) e o &lt;code&gt;salt&lt;/code&gt; (&amp;ldquo;sal&amp;rdquo;) da seguinte forma:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;$password = &amp;#39;a_minha_password&amp;#39;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Da seguinte forma podemos gerar a hash de uma password&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * utilizando o algoritmo BCRYPT.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Podemos definir duas opções no terceiro parâmetro:&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *  COST  =&amp;gt;  Por padrão, será criado um novo por cada nova&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * hash criada porém pode ser definido.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *  SALT  =&amp;gt;  Por padrão, o valor 10 irá ser utilizado porém&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * pode ser alterado à semelhança do anterior.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;$options = array(&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;#39;cost&amp;#39;  =&amp;gt; 13,&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;#39;salt&amp;#39;  =&amp;gt; mcrypt_create_iv(25, MCRYPT_DEV_URANDOM)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  );&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;password_hash($password, PASSWORD_BCRYPT, $options);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Acrescento ainda que a função retornará &lt;code&gt;false&lt;/code&gt; em caso de erro.&lt;/p&gt;

&lt;h2 id=&#34;password-verify:f2cd69faba962abe878d8e6257d3bccb&#34;&gt;password_verify&lt;/h2&gt;

&lt;p&gt;Depois de criarmos a &lt;em&gt;hash&lt;/em&gt; vamos precisar de, evidentemente, confirmá-la. Para confirmar se uma password corresponde a uma hash basta utilizarmos esta função da seguinte forma:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Para utilizar esta função basta colocar a password&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * a verificar no primeiro parâmetro e a hash no segundo.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Não precisa de se preocupar se colocou algum &amp;quot;salt&amp;quot; ou&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * &amp;quot;cost&amp;quot; personalizados pois esta informação está embutida&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * na hash.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * A função irá returnar os valores &amp;quot;true&amp;quot; ou &amp;quot;false&amp;quot;.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;$password = &amp;#39;teste&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$hash = &amp;#39;$2y$10$M.3t0/gmB12IrSETmINf7uy9XhruDrmB8vjaktfd5vC8AfVPH695.&amp;#39;;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;password_verify($password, $hash);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id=&#34;password-get-info:f2cd69faba962abe878d8e6257d3bccb&#34;&gt;password_get_info&lt;/h2&gt;

&lt;p&gt;Esta informação permite-nos obter a informação acerca de uma hash. A informação obtida corresponde ao algoritmo, o seu nome e as opções dadas quando criámos a hash. Exemplo:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;//Criação de uma hash de exemplo&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;$options = array(&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;#39;cost&amp;#39;  =&amp;gt; 13,&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;#39;salt&amp;#39;  =&amp;gt; mcrypt_create_iv(25, MCRYPT_DEV_URANDOM)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  );&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;$hash = password_hash(&amp;#39;a_minha_password&amp;#39;, PASSWORD_BCRYPT, $options);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Utilizando a função password_get_info, vamos obter as diversas opções&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * enviadas quando criámos a hash.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;$info = password_get_info($hash);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * Assim, var_dump($info) irá retornar o seguinte:&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * array(3) {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * 	[&amp;quot;algo&amp;quot;]=&amp;gt; int(1)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *	[&amp;quot;algoName&amp;quot;]=&amp;gt; string(6) &amp;quot;bcrypt&amp;quot;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *	[&amp;quot;options&amp;quot;]=&amp;gt; array(1)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *		{ [&amp;quot;cost&amp;quot;]=&amp;gt; int(13) }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; *	}&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2 id=&#34;password-needs-rehash:f2cd69faba962abe878d8e6257d3bccb&#34;&gt;password_needs_rehash&lt;/h2&gt;

&lt;p&gt;Esta função permite-nos confirmar se uma hash já criada corresponde a uma array de opções e a um algoritmos. Podem observar mais no seguinte exemplo:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;x&#34;&gt;//Criação de uma hash de exemplo&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;$options = array(&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;#39;cost&amp;#39;  =&amp;gt; 13,&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    &amp;#39;salt&amp;#39;  =&amp;gt; mcrypt_create_iv(25, MCRYPT_DEV_URANDOM)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  );&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;$hash = password_hash(&amp;#39;a_minha_password&amp;#39;, PASSWORD_BCRYPT, $options);&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * A função seguinte irá retornar true porque todas as opções corresponde&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; * às que foram dadas anteriormente.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt; */&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;password_needs_rehash($hash, 0, $options);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Se tiver qualquer dúvida relacionada ao segundo parâmetro da função, sugiro-lhe a leitura &lt;a href=&#34;http://php.net/manual/pt_BR/password.constants.php&#34;&gt;desta página&lt;/a&gt; e também que verifique os valores obtidos com &lt;code&gt;password_get_info&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Espero que dê bom uso a esta função :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
